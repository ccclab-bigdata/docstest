var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": ""
},

{
    "location": "#Thrift.jl-1",
    "page": "Readme",
    "title": "Thrift.jl",
    "category": "section",
    "text": "(Image: Build Status) (Image: Build status)Apache Thrift is a lightweight, language-independent software stack with an associated code generation mechanism for RPC.Thrift.jl is an implementation of Thrift for Julia, including a plugin for the Thrift IDL compiler."
},

{
    "location": "#Getting-Started-1",
    "page": "Readme",
    "title": "Getting Started",
    "category": "section",
    "text": ""
},

{
    "location": "#Setting-up-Thrift-for-Julia-1",
    "page": "Readme",
    "title": "Setting up Thrift for Julia",
    "category": "section",
    "text": "Install the Julia Thrift package: Pkg.add(\"Thrift\").On Linux and OSX a Julia Thrift compiler will be installed under the deps folder. You may add it to your PATH environment for convenience. On Windows, no pre-built Julia Thrift compiler is installed. Note that the Thrift compiler is only needed to generate Julia code from IDLs. If generated code is already available, Thrift.jl can be used with it even if a compiler is not available.To build the Julia Thrift compiler (if needed):Patch the Thrift IDL compiler with the Julia code generator plugin. Any one of the following two methods can be followed:\nDownload Thrift sources from Apache. Place Julia plugin t_jl_generator.cc into compiler/cpp/src/generate folder. Update makefiles to include the new source and rebuild.\nClone Thrift sources from a fork here.\nBuild and install the Thrift compiler. Some instructions here."
},

{
    "location": "#Generating-\"Hello-Julia\"-1",
    "page": "Readme",
    "title": "Generating \"Hello Julia\"",
    "category": "section",
    "text": "A sample Hello Julia IDL and implementation is bundled along with the Thrift.jl package. It can be found under test/hello folder of the package.It contains a Thrift IDL named hello.thrift, which contains a service SayHello with a hello method that returns a hello message for the supplied name in a randomly chosen language.Generate Julia sources from the IDL.\nRun command: thrift --gen jl hello.thrift. This should result in a gen-jl folder with sources generated from the IDL placed in a folder hello (named after the IDL file name).\nExamine the generated files. Below is a brief explanation of the contents of the generated files.\nhello_types.jl: contains Julia types for Thrift structs, exceptions and enums declared explicitly in the IDL along with other implicit types generated by the code generator.\nhello_constants.jl: contains any constants declared in the IDL\nSayHello.jl: code generated for the SayHello service.\nhello.jl: contains a module named hello (named after the IDL file name), that includes the above mentioned generated files. It also includes a file named hello_impl.jl that is not generated, but must be created by the user."
},

{
    "location": "#Implementing-\"Hello-Julia\"-1",
    "page": "Readme",
    "title": "Implementing \"Hello Julia\"",
    "category": "section",
    "text": "An implementation of the service methods are already provided as hello_impl.jl in the test/hello folder. It has an implementation of hello service method, that appends a randomly chosen greeting from the constant array GREETINGS to the supplied name.\nPlace the hello_impl.jl file in the gen-jl/hello folder.\nThe client and server implementations for this are already provided as clnt.jl and srvr.jl. Start the server with julia srvr.jl. Run the client with the command julia clnt.jl."
},

{
    "location": "#Setting-and-Getting-Fields-1",
    "page": "Readme",
    "title": "Setting and Getting Fields",
    "category": "section",
    "text": "Types used as Thrift structures are regular Julia types and the Julia syntax to set and get fields can be used on them. But with fields that are set as optional, it is quite likely that some of them may not have been present in the instance that was read. Similarly, fields that need to be sent need to be explicitly marked as being set. The following methods are exported to assist doing this:get_field(obj, fld::Symbol) : Gets obj.fld if it has been set. Throws an error otherwise.\nset_field!(obj, fld::Symbol, val) : Sets obj.fld = val and marks the field as being set. The value would be written on the wire when obj is serialized. Fields can also be set the regular way, but then they must be marked as being set using the fillset method.\nhas_field(obj, fld::Symbol) : Checks whether field fld has been set in obj.\nclear(obj, fld::Symbol) : Marks field fld of obj as unset.\nclear(obj) : Marks all fields of obj as unset.The thriftbuild method makes it easier to set large types with many fields: thriftbuild{T}(::Type{T}, nvpairs::Dict{Symbol}()=Dict{Symbol,Any}())"
},

{
    "location": "#Other-Methods-1",
    "page": "Readme",
    "title": "Other Methods",
    "category": "section",
    "text": "copy!(to, from) : shallow copy of objects\nisfilled(obj, fld::Symbol) : same as has_field\nisfilled(obj) : whether all mandatory fields are set\nfillset(obj, fld::Symbol) : mark field fld of object obj as set\nfillunset(obj) : mark all fields of this object as not set\nfillunset(obj, fld::Symbol) : mark field fld of object obj as not set\nenumstr(enumname, enumvalue::Int32): returns a string with the enum field name matching the value"
},

{
    "location": "#On-the-Generated-Code-Structure-1",
    "page": "Readme",
    "title": "On the Generated Code Structure",
    "category": "section",
    "text": "The generated code largely follows the scheme used in other languages, e.g. Python and C++. Each Thrift program (IDL file) is placed into a separate folder. The program (IDL file) name must be different from any of the service names defined in the program. Generated files may get clobbered if that is violated, because of filename clashes.A Julia module is also generated  bundle all sources together. Using the module is optional, though convenient in most cases. The example in test/calculator illustrates how to include multiple thrift generated services in a single Julia module, without using the autogenerated modules.The generated service Processor now assumes that the implemented methods are present in the current module. Thus the generated code is not a complete module and requires the user to supply a service implementation to be complete. An alternative would be to make the generated code a complete module, and have the user supply an implementation module.Service extensions are supported. The thrift processor on the server side passes on any methods it can not handle to the processor it extends from. Extensions of service clients are supported through Julia type extension.The code generator can be tweaked in the future towards any preferred way of usage that may appear with further usage."
},

{
    "location": "#Thrift-Metadata-1",
    "page": "Readme",
    "title": "Thrift Metadata",
    "category": "section",
    "text": "Thrift serialization can be customized for a type by defining a meta method on it. The meta method provides an instance of ThriftMeta that allows specification of optional fields, field numbers, and default values for fields for a type. The Thrift code generator generates appropriate meta methods wherever required. The below information will however help in understanding and tweaking the generated code if required.Defining a specialized meta is done simply as below:import Thrift.meta\n\nmeta(t::Type{MyType}) = meta(t,                          # the type which this is for\n        Symbol[:intval],                                 # optional fields\n        Int[8, 10],                                      # field numbers\n        Dict{Symbol,Any}(:strval => \"default value\"))    # default valuesWithout any specialized meta method:All fields are marked as required.\nField numbers are assigned serially starting from -1, and decremented in the order of their declaration.\nNo default values are assigned.When the default behavior is fine, just passing empty values would do. E.g., if just field numbers need to be specified, the following would do:meta(t::Type{MyType}) = meta(t, [], [8,10], Dict())"
},

{
    "location": "#Implementation-Status-1",
    "page": "Readme",
    "title": "Implementation Status",
    "category": "section",
    "text": "Following is the status of protocols, transports and servers supported in the current implementation:Protocol Implemented as &nbsp;\nBinary TBinaryProtocol \nCompact TCompactProtocol Transport Implemented as &nbsp;\nSocket TSocket and TServerSocket \nFramed TFramedTransport \nSASL TSASLClientTransport Only client side implementation as of now\nMemory TMemoryTransport Can\'t be used with servers as of now\nFile TFileTransport Can\'t be used with servers as of nowServer Implemented as &nbsp;\nBlocking. Single Task. TSimpleServer Single process, blocking\nNon Blocking Tasks. TTaskServer Single process. Asynchronous task spawned for each connection.\nNon Blocking Multi Process. TProcessPoolServer Multi process, non blocking."
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "Thrift.@logmsgThrift.ApplicationExceptionTypeThrift.BINARY_TYPE_MASKThrift.BINARY_VERSION_1Thrift.BINARY_VERSION_MASKThrift.COMPACT_PROTOCOL_IDThrift.COMPACT_TYPE_MASKThrift.COMPACT_TYPE_SHIFT_AMOUNTThrift.COMPACT_VERSIONThrift.COMPACT_VERSION_MASKThrift.CSTATES_READ_BOOLThrift.CSTATES_READ_COLLECTION_BEGINThrift.CSTATES_READ_FIELD_ENDThrift.CSTATES_READ_STRUCT_BEGINThrift.CSTATES_WRITE_COLLECTION_BEGINThrift.CSTATES_WRITE_FIELD_ENDThrift.CSTATES_WRITE_STRUCT_BEGINThrift.CStateThrift.CTYPE_TO_TTYPEThrift.CTypeThrift.MASK7Thrift.MASK8Thrift.MSBThrift.MessageTypeThrift.ProtocolExceptionTypeThrift.SASLExceptionThrift.SASL_BADThrift.SASL_COMPLETEThrift.SASL_ERRORThrift.SASL_ERR_INVALIDThrift.SASL_ERR_NEGOTIATIONThrift.SASL_ERR_UNKNOWNThrift.SASL_ERR_UNSUPPORTEDThrift.SASL_MECHANISMSThrift.SASL_MECH_KERBThrift.SASL_MECH_LDAPThrift.SASL_MECH_PLAINThrift.SASL_OKThrift.SASL_STARTThrift.SASL_ZEROThrift.TApplicationExceptionThrift.TAsyncServerThrift.TBINARYThrift.TBOOLThrift.TBYTEThrift.TBinaryProtocolThrift.TCompactProtocolThrift.TDOUBLEThrift.TExceptionThrift.TFileTransportThrift.TFramedTransportThrift.TI08Thrift.TI16Thrift.TI32Thrift.TI64Thrift.TIOThrift.TLISTThrift.TMAPThrift.TMemoryTransportThrift.TMsgThrift.TProcessPoolServerThrift.TProcessorThrift.TProtocolThrift.TProtocolExceptionThrift.TSASLClientTransportThrift.TSETThrift.TSTOPThrift.TSTRINGThrift.TSTRUCTThrift.TServerThrift.TServerBaseThrift.TServerSocketThrift.TServerTransportThrift.TSimpleServerThrift.TSocketThrift.TSocketBaseThrift.TTYPE_TO_CTYPEThrift.TTaskServerThrift.TTransportThrift.TTransportExceptionThrift.TTypeThrift.TUTF16Thrift.TUTF7Thrift.TUTF8Thrift.TVOIDThrift.ThriftThrift.ThriftHandlerThrift.ThriftMetaThrift.ThriftMetaAttribsThrift.ThriftProcessorThrift.TransportExceptionTypesThrift._TJTypesThrift._TTypeNamesThrift._appex_msgsThrift._container_type_idsThrift._container_typesThrift._enum_CStateThrift._enum_CTypeThrift._enum_TApplicationExceptionTypesThrift._enum_TMessageTypeThrift._enum_TProtocolExceptionTypesThrift._enum_TTransportExceptionTypesThrift._enum_TTypesThrift._exceptionThrift._fillcacheThrift._metacacheThrift._plain_type_idsThrift._plain_typesThrift._processThrift._read_fixedThrift._read_ulebThrift._read_zigzagThrift._replyThrift._setmetaThrift._wfbufThrift._write_fixedThrift._write_ulebThrift._write_zigzagThrift.acceptThrift.byte2ctypeThrift.byte2ttypeThrift.chkstateThrift.clearThrift.closeThrift.copy!Thrift.distributeThrift.enumstrThrift.evalThrift.extendThrift.filledThrift.fillsetThrift.fillunsetThrift.flushThrift.get_fieldThrift.handleThrift.has_fieldThrift.includeThrift.iscontainerThrift.isfilledThrift.isinitializedThrift.isopenThrift.isplainThrift.julia_typeThrift.listenThrift.metaThrift.openThrift.processThrift.rawioThrift.readThrift.read!Thrift.readBinaryThrift.readBoolThrift.readByteThrift.readCollectionBeginThrift.readCollectionEndThrift.readDoubleThrift.readFieldBeginThrift.readFieldEndThrift.readFieldStopThrift.readI16Thrift.readI32Thrift.readI64Thrift.readListBeginThrift.readListEndThrift.readMapBeginThrift.readMapEndThrift.readMessageBeginThrift.readMessageEndThrift.readSetBeginThrift.readSetEndThrift.readSizeThrift.readStringThrift.readStructBeginThrift.readStructEndThrift.readVarintThrift.read_containerThrift.readframeThrift.readframeszThrift.sasl_callback_defaultThrift.sasl_negotiateThrift.sasl_negotiate_plainThrift.sasl_readThrift.sasl_writeThrift.serveThrift.serve_acceptedThrift.set_fieldThrift.set_field!Thrift.showThrift.skipThrift.skip_containerThrift.thrift_typeThrift.thriftbuildThrift.validate_sasl_mechThrift.validate_sasl_statusThrift.writeThrift.writeBinaryThrift.writeBoolThrift.writeByteThrift.writeCollectionEndThrift.writeCollectionsBeginThrift.writeDoubleThrift.writeFieldBeginThrift.writeFieldEndThrift.writeFieldHeaderThrift.writeFieldStopThrift.writeI16Thrift.writeI32Thrift.writeI64Thrift.writeListBeginThrift.writeListEndThrift.writeMapBeginThrift.writeMapEndThrift.writeMessageBeginThrift.writeMessageEndThrift.writeSetBeginThrift.writeSetEndThrift.writeSizeThrift.writeStringThrift.writeStructBeginThrift.writeStructEndThrift.writeVarintThrift.write_container"
},

]}

var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": ""
},

{
    "location": "#Dynamic-Polynomials-1",
    "page": "Readme",
    "title": "Dynamic Polynomials",
    "category": "section",
    "text": "PackageEvaluator Build Status References to cite\n[![][pkg-0.6-img]][pkg-0.6-url] [![Build Status][build-img]][build-url] [![Build Status][winbuild-img]][winbuild-url] [![DOI][zenodo-img]][zenodo-url]\n[![][pkg-0.7-img]][pkg-0.7-url] [![Coveralls branch][coveralls-img]][coveralls-url] [![Codecov branch][codecov-img]][codecov-url] Sparse dynamic representation of multivariate polynomials that can be used with MultivariatePolynomials (see the documentation there for more information). Both commutative and non-commutative variables are supported. The following types are defined:PolyVar{C}: A variable which is commutative with * when C is true. Commutative variables are created using the @polyvar macro, e.g. @polyvar x y, @polyvar x[1:8] and non-commutative variables are created likewise using the @ncpolyvar macro.\nMonomial{C}: A product of variables: e.g. x*y^2.\nTerm{C, T}: A product between an element of type T and a Monomial{C}, e.g 2x, 3.0x*y^2.\nPolynomial{C, T}: A sum of Term{C, T}, e.g. 2x + 3.0x*y^2 + y.All common algebraic operations between those types are designed to be as efficient as possible without doing any assumption on T. Typically, one imagine T to be a subtype of Number but it can be anything. This is useful for example in the package PolyJuMP where T is often an affine expression of JuMP decision variables. The commutativity of T with * is not assumed, even if it is the coefficient of a monomial of commutative variables. However, commutativity of T and of the variables + is always assumed. This allows to keep the terms sorted (Graded Lexicographic order is used) in polynomial and measure which enables more efficient operations.Below is a simple usage example@polyvar x y # assigns x (resp. y) to a variable of name x (resp. y)\np = 2x + 3.0x*y^2 + y\n@test differentiate(p, x) # compute the derivative of p with respect to x\n@test differentiate.(p, (x, y)) # compute the gradient of p\n@test p((x, y)=>(y, x)) # replace any x by y and y by x\n@test subs(p, y=>x^2) # replace any occurence of y by x^2\n@test p(x=>1, y=>2) # evaluate p at [1, 2]Below is an example with @polyvar x[1:n]n = 3\nA = rand(n, n)\n@polyvar x[1:n] # assign x to a tuple of variables x1, x2, x3\np = sum(x .* x) # x_1^2 + x_2^2 + x_3^2\nsubs(p, x[1]=>2, x[3]=>3) # x_2^2 + 13\np(x=>A*vec(x)) # corresponds to dot(A*x, A*x), need vec to convert the tuple to a vectorNote that, when doing substitution, it is required to give the PolyVar ordering that is meant. Indeed, the ordering between the PolyVar is not alphabetical but rather by order of creation which can be undeterministic with parallel computing. Therefore, this order cannot be used for substitution, even as a default (see here for a discussion about this).[pkg-0.6-img]: http://pkg.julialang.org/badges/DynamicPolynomials0.6.svg [pkg-0.6-url]: http://pkg.julialang.org/?pkg=DynamicPolynomials [pkg-0.7-img]: http://pkg.julialang.org/badges/DynamicPolynomials0.7.svg [pkg-0.7-url]: http://pkg.julialang.org/?pkg=DynamicPolynomials[build-img]: https://travis-ci.org/JuliaAlgebra/DynamicPolynomials.jl.svg?branch=master [build-url]: https://travis-ci.org/JuliaAlgebra/DynamicPolynomials.jl [winbuild-img]: https://ci.appveyor.com/api/projects/status/wu5dnoq4x3jvjft8?svg=true [winbuild-url]: https://ci.appveyor.com/project/blegat/dynamicpolynomials-jl [coveralls-img]: https://coveralls.io/repos/github/JuliaAlgebra/DynamicPolynomials.jl/badge.svg?branch=master [coveralls-url]: https://coveralls.io/github/JuliaAlgebra/DynamicPolynomials.jl?branch=master [codecov-img]: http://codecov.io/github/JuliaAlgebra/DynamicPolynomials.jl/coverage.svg?branch=master [codecov-url]: http://codecov.io/github/JuliaAlgebra/DynamicPolynomials.jl?branch=master[zenodo-url]: https://doi.org/10.5281/zenodo.1203245 [zenodo-img]: https://zenodo.org/badge/DOI/10.5281/zenodo.1203245.svg"
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "DynamicPolynomials.@ncpolyvarDynamicPolynomials.@polyvarDynamicPolynomials.@similarvariableDynamicPolynomials.AbstractMonomialDynamicPolynomials.AbstractMonomialLikeDynamicPolynomials.AbstractPolynomialDynamicPolynomials.AbstractPolynomialLikeDynamicPolynomials.AbstractTermDynamicPolynomials.AbstractTermLikeDynamicPolynomials.AbstractVariableDynamicPolynomials.DMonoVecDynamicPolynomials.DMonoVecElemDynamicPolynomials.DMonoVecElemNonConstantDynamicPolynomials.DMonomialLikeDynamicPolynomials.DynamicPolynomialsDynamicPolynomials.MPDynamicPolynomials.MonomialDynamicPolynomials.MonomialVectorDynamicPolynomials.MultivariatePolynomialsDynamicPolynomials.PolyTypeDynamicPolynomials.PolyVarDynamicPolynomials.PolynomialDynamicPolynomials.RationalPolyDynamicPolynomials.TermDynamicPolynomials.TermIteratorDynamicPolynomials.TermPolyDynamicPolynomials.TupOrVecDynamicPolynomials.VarVecDynamicPolynomials._eltypeDynamicPolynomials._getindexDynamicPolynomials._removedups!DynamicPolynomials._sortmonovecDynamicPolynomials._subsDynamicPolynomials._subsmapDynamicPolynomials._substypeDynamicPolynomials._sumprodDynamicPolynomials._term_poly_multDynamicPolynomials._varsDynamicPolynomials._vecDynamicPolynomials.buildZvarsvecDynamicPolynomials.buildpolyvarDynamicPolynomials.buildpolyvarsDynamicPolynomials.canonicalDynamicPolynomials.coefficientDynamicPolynomials.coefficientsDynamicPolynomials.coefficienttypeDynamicPolynomials.constantmonomialDynamicPolynomials.constanttermDynamicPolynomials.degreeDynamicPolynomials.differentiateDynamicPolynomials.dividesDynamicPolynomials.emptymonovecDynamicPolynomials.evalDynamicPolynomials.exponentsDynamicPolynomials.extdegreeDynamicPolynomials.fillZfordeg!DynamicPolynomials.fillZrec!DynamicPolynomials.fillmap!DynamicPolynomials.getZfordegsDynamicPolynomials.getvarsforlengthDynamicPolynomials.grlexDynamicPolynomials.includeDynamicPolynomials.insertvarDynamicPolynomials.isapproxzeroDynamicPolynomials.iscommDynamicPolynomials.isconstantDynamicPolynomials.leadingcoefficientDynamicPolynomials.leadingmonomialDynamicPolynomials.leadingtermDynamicPolynomials.mapexponentsDynamicPolynomials.maxdegreeDynamicPolynomials.mergemonovecDynamicPolynomials.mergevarsDynamicPolynomials.mindegreeDynamicPolynomials.monicDynamicPolynomials.monoevalDynamicPolynomials.monomialDynamicPolynomials.monomialsDynamicPolynomials.monomialtypeDynamicPolynomials.monovecDynamicPolynomials.monovectypeDynamicPolynomials.multdivmonoDynamicPolynomials.multiplyexistingvarDynamicPolynomials.multiplyvarDynamicPolynomials.mycompDynamicPolynomials.myminivectDynamicPolynomials.nameDynamicPolynomials.name_base_indicesDynamicPolynomials.ntermsDynamicPolynomials.nvariablesDynamicPolynomials.plusorminusDynamicPolynomials.polyarrayvarDynamicPolynomials.polynomialDynamicPolynomials.polynomialcleanDynamicPolynomials.polynomialtypeDynamicPolynomials.polyvecvarDynamicPolynomials.powersDynamicPolynomials.removedupsDynamicPolynomials.removeleadingtermDynamicPolynomials.removemonomialsDynamicPolynomials.similarvariableDynamicPolynomials.sortmonovecDynamicPolynomials.subsDynamicPolynomials.subsmapDynamicPolynomials.termDynamicPolynomials.termsDynamicPolynomials.termtypeDynamicPolynomials.trimapDynamicPolynomials.variableDynamicPolynomials.variablesDynamicPolynomials.zeroterm"
},

]}

var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": "(Image: Build Status) (Image: Coverage Status)<h1>TeaSeis.jl</h1> TeaSeis.jl is a Julia library for reading and writing JavaSeis files (The name TeaSeis.jl was chosen instead of JavaSeis.jl due to potential trademark issues).  The JavaSeis file format is used in various software projects including <a href=https://www.landmark.solutions/seisspace-promax>SeisSpace</a>.  The original library is written in <a href=http://sourceforge.net/projects/javaseis>Java</a>.  There are also <a href=http://www.jseisio.com>C++</a> and <a href=https://github.com/asbjorn/pyjavaseis>Python</a> implementations available.  Similar to the C++ library, TeaSeis.jl is a stripped down version of the original Java library.  In particular, the intent is to only supply methods for reading and writing from and to JavaSeis files.Trademarks\nLicense and copyright\nDependencies\nObtaining TeaSeis.jl\nUsing TeaSeis.jl\nQuick start guide\nwriting\nreading\njsopen / jscreate\nAvailable options when creating a new JavaSeis file\nRead/write methods\nAlternative read/write methods (N-Dimensional slices)\nAlternative write methods for full frames\nTrace Properties\nTRC_TYPE\nData properties\nSecondaries\nGeometry\nConvenience methods and dictionaries\nAPI<a id=\'Trademarks-1\'></a>"
},

{
    "location": "#Trademarks-1",
    "page": "Readme",
    "title": "Trademarks",
    "category": "section",
    "text": "SEISSPACE and PROMAX are registered trademarks of LANDMARK GRAPHICS CORPORATION\nJava is a registred trademark of Oracle<a id=\'License-and-copyright-1\'></a>"
},

{
    "location": "#License-and-copyright-1",
    "page": "Readme",
    "title": "License and copyright",
    "category": "section",
    "text": "The License and copyright information can be found in the source distribution: LICENSE.txt, COPYRIGHT.txt<a id=\'Dependencies-1\'></a>"
},

{
    "location": "#Dependencies-1",
    "page": "Readme",
    "title": "Dependencies",
    "category": "section",
    "text": "TeaSeis.jl depends on the LightXML.jl package.<a id=\'Obtaining-TeaSeis.jl-1\'></a>"
},

{
    "location": "#Obtaining-TeaSeis.jl-1",
    "page": "Readme",
    "title": "Obtaining TeaSeis.jl",
    "category": "section",
    "text": "Pkg.add(\"TeaSeis\")<a id=\'Using-TeaSeis.jl-1\'></a>"
},

{
    "location": "#Using-TeaSeis.jl-1",
    "page": "Readme",
    "title": "Using TeaSeis.jl",
    "category": "section",
    "text": "<a id=\'Quick-start-guide-1\'></a>"
},

{
    "location": "#Quick-start-guide-1",
    "page": "Readme",
    "title": "Quick start guide",
    "category": "section",
    "text": "First, load  the TeaSeis.jl library:using TeaSeis<a id=\'writing-1\'></a>"
},

{
    "location": "#writing-1",
    "page": "Readme",
    "title": "writing",
    "category": "section",
    "text": "Create a new JavaSeis file with a 3D framework (128 samples per trace, 32 traces per frame, and 16 frames per volume):io = jsopen(\"filename.js\", \"w\", axis_lengths=[128, 32, 16])Note that by default, SAMPLE, TRACE, and FRAME will be the axes properties.Allocate traces and headers for a single frame:trcs, hdrs = allocframe(io)Populate trcs, and hdrs with values.  For example, write random values to all traces in the first frame:map(i->set!(prop(io, stockprop[:TRC_TYPE]), hdrs, i, tracetype[:live]), 1:size(io,2))\nmap(i->set!(prop(io, stockprop[:TRACE]   ), hdrs, i, i               ), 1:size(io,2))\nmap(i->set!(prop(io, stockprop[:FRAME]   ), hdrs, i, 1               ), 1:size(io,2))\nrand!(trcs)\nwriteframe(io, trcs, hdrs)Close the fileclose(io)<a id=\'reading-1\'></a>"
},

{
    "location": "#reading-1",
    "page": "Readme",
    "title": "reading",
    "category": "section",
    "text": "Open a new JavaSeis file from an existing dataset:io = jsopen(\"filename.js\", \"r\")Read the first frame:trcs, hdrs = readframe(io, 1)or a similar in-place version:trcs, hdrs = allocframe(io)\nreadframe!(io, trcs, hdrs, 1)Access values stored in a trace property for the first trace in the frame:get(prop(io, stockprop[:TRACE]), hdrs, 1)or, slightly less efficient:get(prop(io, stockprop[:TRACE]), hdrs[:,1])Close the fileclose(io)<a id=\'jsopen-/-jscreate-1\'></a>"
},

{
    "location": "#jsopen-/-jscreate-1",
    "page": "Readme",
    "title": "jsopen / jscreate",
    "category": "section",
    "text": "A JavaSeis dataset is created/opened with the jsopen method which returns a JSeis. A JavaSeis dataset must have a minimum of 3 dimensions.  Create a 3D JavaSeis file with 10 samples per trace, 11 traces per frame, and 12 frames per volume:io = jsopen(\"file.js\", \"w\", axis_lengths=[10,11,12])Open an existing JavaSeis file in read-only mode:io = jsopen(\"file.js\", \"r\")\nio = jsopen(\"file.js\")      # equivalent to previous lineOpen an existing JavaSeis file for reading and writing:io = jsopen(\"file.js\", \"r+\")To close an open dataset:close(io)To create a dataset:jscreate(\"file.js\", axis_lengths=[10,11,12])This is useful for when you need to create the data-set on the master process, and write to it on worker processes.<a id=\'Available-options-when-creating-a-new-JavaSeis-file-1\'></a>"
},

{
    "location": "#Available-options-when-creating-a-new-JavaSeis-file-1",
    "page": "Readme",
    "title": "Available options when creating a new JavaSeis file",
    "category": "section",
    "text": "The jscreate and, when operating in write \"w\" mode, jsopen functions take the following named optional arguments:similarto::String<br>An existing JavaSeis dataset.  If set, then all other named arguments can be used to modify the data context that belongs to the existing JavaSeis dataset.description::String<br>Description of dataset, if not set, then a description is parsed from the filename.mapped::Bool<br>If the dataset is full (no missing frames/traces), then it may be more efficient to set this to false.  Defaults to true.nextents::Int<br>The number of file-extents used to store the data.  If not set, then a heuristic is used to choose the number of extents.secondaries::Array{String, 1}<br>An array of file-system locations used to store the file extents.  If not set, then primary storage is used.datatype::String<br>Examples are CMP, SHOT, etc.  If not set, then UNKNOWN is used.dataformat::Type<br>Choose from Float32, and Int16.  If not set, then Float32 is used.dataorder::String<br>(not supported)axis_propdefs::Array{TracePropertyDef, 1}<br>Trace properties corresponding to JavaSeis axes.  If not set, then SAMPLE, TRACE, FRAME, VOLUME and HYPRCUBE are used.axis_units::Array{String, 1}<br>Units corresponding to JavaSeis axes. e.g. SECONDS, METERS, etc.  If not set, then UNKNOWN is used.axis_domains::Array{String, 1}<br>Domains corresponding to JavaSeis axes. e.g. SPACE, TIME, etc.  If not set, then UNKNOWN is used.axis_lstarts::Array{Int32, 1}<br>Logical origins for each axis.  If not set, then 1 is used for the logical origin of each axis.axis_lincs::Array{Int32, 1}<br>Logical increments for each axis.  If not set, then 1 is used for the logical increments of each axis.axis_pstarts::Array{Float64, 1}<br>Physical origins for each axis.  If not set, then 0.0 is used for the physical origin of each axis.axis_pincs::Array{Float64, 1}<br>Physical increments for each axis.  If not set, then 1.0 is used for the physical increments of each axis.properties::Array{TracePropertyDef, 1}<br>An array of custom trace properties.  These are in addition to a minimal set of trace properties listed in the ProMax manual.dataproperties::Array{DataProperty, 1}<br>An array of custom data properties.  One property per data-set rather than one property per trace as in properties above.geometry::Geometry<br>An optional three point geometry can be embedded in the JavaSeis file.properties_add::Array{TracePropertyDef}When similarto is specified, use this to add trace properties to those already existing in the similarto file.properties_rm::Array{TracePropertyDef}When similarto is specified, use this to remove trace properties to those already existing in the similarto file.dataproperties_add::Array{DataProperty}When similarto is specfied, use this to add dataset properties to those aloready existing in the similarto file.dataproperties_rm::Array{DataProperty}When similarto is specified, use this to remove dataset properties to those already existing in the similarto file.For example:io = jsopen(\"file.js\", \"w\", axis_lengths=[10,11,12], dataformat=Float16, axis_pincs=[0.004,10.0,20.0])<a id=\'Read/write-methods-1\'></a>"
},

{
    "location": "#Read/write-methods-1",
    "page": "Readme",
    "title": "Read/write methods",
    "category": "section",
    "text": "JavaSeis is a frame based file format.For io::JSeis, allocate memory for a single frame:trcs, hdrs = allocframe(io) # allocate memory for traces and headers for a single frame\ntrcs = allocframetrcs(io)   # allocate memory for traces for a single frame\nhdrs = allocframehdrs(io)   # allocate memory for headers for a single frameRead a frame. ifrm::Int, ivol::Int, ihyp::Int and i6::Int must be consistent with the JavaSeis data context.trcs, hdrs = readframe(io, ifrm)                 # read from 3D data\ntrcs, hdrs = readframe(io, ifrm, ivol)           # read from 4D data\ntrcs, hdrs = readframe(io, ifrm, ivol, ihyp)     # read from 5D data\ntrcs, hdrs = readframe(io, ifrm, ivol, ihyp, i6) # read from 6D data\n...Read a frame (in-place) using pre-allocated memory:ifrm = 1\nreadframe!(io, trcs, hdrs, ifrm)                # read from 3D data\nreadframe!(io, trcs, hdrs, ifrm, ivol)          # read from 4D data\nreadframe!(io, trcs, hdrs, ifrm, ivol, ihyp)    # read from 5D data\nreadframe!(io, trcs, hdrs, ifrm, ivol, ihyp, i6) # read from 6D data\n...Note that readframe! methods returns the <b>fold</b> (number of live traces in the frame).Similar methods exist for reading only headers:ifrm = 1\nhdrs = readframehdrs(io, ifrm)                 # read from 3D data\nhdrs = readframehdrs(io, ifrm, ivol)           # read from 4D data\nhdrs = readframehdrs(io, ifrm, ivol, ihyp)     # read from 5D data\nhdrs = readframehdrs(io, ifrm, ivol, ihyp, i6) # read from 6D data\n...\nreadframehdrs!(io, hdrs, ifrm)                 # in-place read from 3D data\nreadframehdrs!(io, hdrs, ifrm, ivol)           # in-place read from 4D data\nreadframehdrs!(io, hdrs, ifrm, ivol, ihyp)     # in-place read from 5D data\nreadframehdrs!(io, hdrs, ifrm, ivol, ihyp, i6) # in-place read from 6D data\n...or only traces:ifrm = 1\ntrcs = readframetrcs(io, ifrm)                 # read from 3D data\ntrcs = readframetrcs(io, ifrm, ivol)           # read from 4D data\ntrcs = readframetrcs(io, ifrm, ivol, ihyp)     # read from 5D data\ntrcs = readframetrcs(io, ifrm, ivol, ihyp, i6) # read from 6D data\n...\nreadframetrcs!(io, trcs, ifrm)                 # in-place read from 3D data\nreadframetrcs!(io, trcs, ifrm, ivol)           # in-place read from 4D data\nreadframetrcs!(io, trcs, ifrm, ivol, ihyp)     # in-place read from 5D data\nreadframetrcs!(io, trcs, ifrm, ivol, ihyp, i6) # in-place read from 6D data\n...Write a frame. The frame, volume, and hypercube indices are determined from the trace properties (hdrs::Array{UInt8,2})writeframe(io, trcs, hdrs)To loop over all frames in a dataset of arbitrary dimension, TeaSeis.jl provides an iterator-type API:for i=1:length(io)\n    trcs, hdrs = readframe(io, ind2sub(io,i)...)\nendwhere length(io) is the number of frames in io, ind2sub converts the linear index i into n-tuple indexing dimensions 3 and higher.  Of course, this can also be used with readframe!, readframetrcs, readframetrcs!, readframehdrs and readframehdrs!.<h3> IMPORTANT NOTE: </h3>It is <b>very</b> important to note that the JavaSeis format left-justifies all live traces in a frame.  This makes reading and writing data more efficient. However, if you are reading or writing non-full frames, extra care must be taken.  Two methods (leftjustify! and regularize!) are provided to help with this situation.Writing a non-full frame:leftjustify!(io, trcs, hdrs)\nwriteframe(io, trcs, hdrs)Reading a non-full frame:readframe!(io, trcs, hdrs, 1)\nregularize!(io, trcs, hdrs)\nregularize!(io, trcs, hdrs, stockprop[:TRACE]) # used when the trace label does not correspond to a trace propertyPlease note that the regularize method sets the :TRC_TYPE property appropriately.  That is, a padded trace is of tracetype[:dead].Methods for finding the fold of a frame:fold(io, hdrs)                 # get fold by examining the headers `hdrs` from a frame\nfold(io, ifrm)                 # get fold from a 3D data set using the JavaSeis `TraceMap` file\nfold(io, ifrm, ivol)           # get fold from a 4D data set using the JavaSeis `TraceMap` file\nfold(io, ifrm, ivol, ihyp)     # get fold from a 5D data set using the JavaSeis `TraceMap` file\nfold(io, ifrm, ivol, ihyp, i6) # get fold from a 6D data set using the JavaSeis `TraceMap` file\n...<a id=\'Alternative-read/write-methods-(N-Dimensional-slices)-1\'></a>"
},

{
    "location": "#Alternative-read/write-methods-(N-Dimensional-slices)-1",
    "page": "Readme",
    "title": "Alternative read/write methods (N-Dimensional slices)",
    "category": "section",
    "text": "We supply convenience methods for reading and writing arbitrary patches of data.  If frames are not full, then the read algorithms include automatic regularization of the frames, and the write algorithms include automatic left justification.  In turn, this means that the convenience of the following methods may come at the expense of extra I/O operations.  This is especially true for JavaSeis datasets that are of 6 or more dimensions.Reading:trcs, hdrs = read(io, 1:10, 2:3, 4)              # read from 3D data (frame 4, traces 2-3, and time samples 1-10)\ntrcs, hdrs = read(io, 1:10, 2:3, 4, :)           # read from 4D data (all volumes, frame 4, traces 2-3, and time samples 1-10)\ntrcs, hdrs = read(io, 1:10, 2:3, 4, :, 2:2:4)    # read from 5D data (Hypercubes 2 and 4, all volumes, frame 4, traces 2-3 and time samples 1-10)\ntrcs, hdrs = read(io, 1:10, 2:3, 4, :, 2:2:4, 1) # read from 6D data (element 1 from the 6th dimension, hypercubes 2 and 4, all volumnes, frame 4, traces 2-3 and time samples 1-10)\n...\nread!(io, trcs, hdrs, 1:10, 2:3, 4)              # in-place read from 3D data\nread!(io, trcs, hdrs, 1:10, 2:3, 4, :)           # in-place read from 4D data\nread!(io, trcs, hdrs, 1:10, 2:3, 4, :, 2:2:4)    # in-place read from 5D data\nread!(io, trcs, hdrs, 1:10, 2:3, 4, :, 2:2:4, 1) # in-place read from 6D data\n...Similar methods exist for reading only traces (for example):trcs = readtrcs(io, 1:10, 2:3, 4)\nreadtrcs!(io, trcs, 1:10, 2:3, 4) # in-place version of previous lineand only headers (for example):hdrs = readhdrs(io, :, 2:3, 4)\nreadhdrs!(io, hdrs, :, 2:3, 4) # in-place version of previous line//Note that when using readhdrs and readhdrs! the slice range for the first dimension is always :.Writing:write(io, trcs, hdrs)       # trcs::Array{Float32,N}, hdrs::Array{Float32,N} where N is either 3,4 or 5.\nwrite(io, trcs, hdrs, 1:10) # same as previous except only time samples 1:10 are written.In the above listing, the locations that are written to are determined by the header values.<a id=\'Alternative-write-methods-for-full-frames-1\'></a>"
},

{
    "location": "#Alternative-write-methods-for-full-frames-1",
    "page": "Readme",
    "title": "Alternative write methods for full frames",
    "category": "section",
    "text": "it is sometimes not convenient to set headers before writing full frames.  This might be true when, for example, one is doing research work where geometry (and other) information does not need to be stored in trace headers.  For this scenario, we provide two sets of alternative API.The first set of API is for writing one frame at a time:writeframe(io, trcs, ifrm)                 # write to 3D data\nwriteframe(io, trcs, ifrm, ivol)           # write to 4D data\nwriteframe(io, trcs, ifrm, ivol, ihyp)     # write to 5D data\nwriteframe(io, trcs, ifrm, ivol, ihyp, i6) # write to 6D data\n...The second set of API is for writing arbitrary N-dimensional slices of data:write(io, trcs, :, 1:10, 3:2:5)            # write to 3D data, all samples; traces 1-10; frames 3, 5\nwrite(io, trcs, :, 1:10, 3:2:5, 6)         # write to 4D data, all samples; traces 1-10; frames 3, 5; volume 6\nwrite(io, trcs, :, 1:10, 3:2:5, 6, :)      # write to 5D data, all samples; traces 1-10; frames 3, 5; volume 6, all hypercubes\nwrite(io, trcs, :, 1:10, 3:2:5, 6, :, 1:2) # write to 6D data, all samples; traces 1-10; frames 3, 5; volume 6, all hypercubes, elements 1 and 2 from dimension 6\n...Please note that in these forms, the writeframe and write methods will create headers for you, and populate the :TRC_TYPE property along with the properties corresponding to the trace and frame axes of your data.  In the case of 4D data, the volume property is also populated, and in the case of 5D data, the volume and hypercube properties are also populated.In addition, please note that in the write method, trcs must have the same number of dimensions as io.  In practice this can be accomplished using reshape.  For example if size(io)=(10,20,3) and size(trcs)=(10,), then to write trcs to the first trace of the first frame of io one could write:write(io, rehsape(trcs, 10, 1, 1), :, 1, 1)<a id=\'Trace-Properties-1\'></a>"
},

{
    "location": "#Trace-Properties-1",
    "page": "Readme",
    "title": "Trace Properties",
    "category": "section",
    "text": "The JavaSeis data format does not specify any trace properties.  However, there are commonly used (<b>stock</b>) properties (listed in STOCKPROPS.md, as well as a minimal set of properties that are expected by SeisSpace (listed in SSPROPS.md).  It is unusual when a stock property does not suit your needs.  But, if need be, you can define a custom property using the TracePropertyDef constructor:pdef = TracePropertyDef(\"label\", \"description\", Float32)\npdef = TracePropertyDef(\"label\", \"description\", Vector{Float32}, 2)The arguments to TracePropertyDef are the <b>label</b>, <b>description</b>, <b>type</b>, and, optionally, the <b>number of elements</b> stored in the property. The stock properties are defined in src/stockprops.jl using a Julia dictionary: stockprop.  For example, access a stock definition for the TRACE property:pdef = stockprop[:TRACE]Given a JavaSeis file io::JSeis and a stock definition, we can access the corresponding property of a JavaSeis file:p = prop(io, pdef)    # access using a `TracePropertyDef`\np = prop(io, \"TRACE\") # alternatively, access using the trace property definition label\np = prop(io, \"TRACE\", Int32) # type-stable version of previous lineGiven, additionally, a frame of headers hdrs::Array{UInt8,2}, we can get and set the values stored in a property:@show get(p, hdrs[:,1])\n@show get(p, hdrs, 1)      # equivalent to the previous line of code\nset!(p, hdrs, 1, 5)        # set the first header in `hdrs` to 5\nwriteframe(io, trcs, hdrs) # the JavaSeis file does not know about the updated header until you call `writeframe`In the above code listing trcs is of type Array{Float32,2}.<a id=\'TRC_TYPE-1\'></a>"
},

{
    "location": "#TRC_TYPE-1",
    "page": "Readme",
    "title": "TRC_TYPE",
    "category": "section",
    "text": "The TRC_TYPE property is used to indicate if a trace is dead, live or auxiliary within any given frame.  It is stored as an Int32.  We provide a second dictionary to map between the Int32 and human readable code:tracetype[:live]\ntracetype[:dead]\ntracetype[:aux]For example,io = jsopen(\"file.js\", \"r\")\ntrcs, hdrs = readframe(io, 1)\nprop_trctype = prop(io, stockprop[:TRC_TYPE])\nfor i=1:size(hdrs,2)\n    if get(prop_trctype, hdrs, i) == tracetype[:live]\n        write(STDOUT, \"trace $(i) is a live trace\\n\")\n    elseif get(prop_trctype, hdrs, i) == tracetype[:dead]\n        write(STDOUT, \"trace $(i) is a dead trace\\n\")\n    elseif get(prop_trctype, hdrs, i) == tracetype[:aux]\n        write(STDOUT, \"trace $(i) is a aux trace\\n\"\n    end\nend\nclose(io)<a id=\'Data-properties-1\'></a>"
},

{
    "location": "#Data-properties-1",
    "page": "Readme",
    "title": "Data properties",
    "category": "section",
    "text": "TeaSeis.jl provides support for storing custum data properties.  This is accomplished by passing an array of DataProperty\'s to the jsopen function.  For example, a data property could be defined as:p = DataProperty(\"Survey date\", Int32, 120977\")<a id=\'Secondaries-1\'></a>"
},

{
    "location": "#Secondaries-1",
    "page": "Readme",
    "title": "Secondaries",
    "category": "section",
    "text": "If you choose to use secondary storage, then it is recommended to set the JAVASEIS_DATA_HOME environment variable.  This is used to determine the file-path for the secondary storage.  For example if,ENV[\"JAVASEIS_DATA_HOME\"] = \"/home/joe/projects\"\ncd(\"/home/joe/projects/some/dir/here\")\nio = jsopen(\"data.js\", \"w\", axis_lengths=[10,11,12], secondaries=[\"/bigdisk/joe\"])\nclose(io)Then the secondary location is determined by replacing /home/joe/projects in /home/joe/projects/some/dir/here/data.js with /bigdisk/joe resulting in /bigdisk/joe/some/dir/here/data.js being the secondary storage for this example.<a id=\'Geometry-1\'></a>"
},

{
    "location": "#Geometry-1",
    "page": "Readme",
    "title": "Geometry",
    "category": "section",
    "text": "TeaSeis.jl provides support for storing survey geometry using three-points to define rotated/translated coordinate system.geom = Geometry(u1=1,un=2,v1=1,vn=2,w1=1,wn=2,ux=1.0,uy=0.0,uz=0.0,vx=0.0,vy=1.0,vz=0.0,wx=0.0,wy=0.0,wz=1.0)where (ox,oy,oz) is the origin, (ux,uy,uz) is a vector to define the end of the u-axis (e.g. cross-line axis), (vx,vy,vz) is the end of the v-axis (e.g. the in-line axis), and (wx,wy,wz) is the end of the w-axis (e.g. the depth axis).  (u1,un) are the first and last bin indices along the u-axis, (v1,vn) are the first and last bin indices along the v-axis, and (w1,wn) are the first and last bin indices along the w-axis.  TeaSeis.jl does not provide any tools for using this geometry to manipulate trace coordinates.  I would recommend that this functionality be put into a separate package.<img src=\"geometry.png\" alt=\"Geometry\"><a id=\'Convenience-methods-and-dictionaries-1\'></a>"
},

{
    "location": "#Convenience-methods-and-dictionaries-1",
    "page": "Readme",
    "title": "Convenience methods and dictionaries",
    "category": "section",
    "text": "For convenience and consistency, we supply several dictionaries.  In addition to the dictionary for trace property definitions and trace type (both described above), there are dictionaries for <b>data domain</b> stockdomain, <b>units</b> stockunit, and <b>data type</b> stockdatatype.  All of these are listed in STOCKPROPS.md.Example usage within the jsopen method:io = jsopen(\"file.js\", \"w\", axis_lengths=[12,11,10], axis_units=[stockunit[:SECONDS], stockunit[:METERS], stockunit[:METERS]], axis_domains=[stockdomain[:TIME], stockdomain[:SPACE], stockdomain[:SPACE], datatype=stockdatatype[:SOURCE])Several convenience methods are supplied for querying io::JSeis:ndims(io)              # returns `Int`, number of dimensions in the JavaSeis dataset\nlength(io)             # returns `Int`, the number of frames in the JavaSeis dataset, equivalent to `prod(size(io)[3:end])`\nsize(io)               # returns `NTuple{Int}`, size of JavaSeis dataset\nsize(io,i)             # returns `Int`, size of JavaSeis dataset along dimension `i::Int`\nprops(io)              # returns `NTuple{TraceProperty}`, trace property along all dimensions\nprops(io,i)            # returns `TraceProperty`, trace property along dimension `i::Int`\npropdefs(io)           # returns `NTuple{TracePropertyDef}`, trace property definition along all dimensions\npropdefs(io,i)         # returns `TracePropertyDef`, trace property along dimension `i::Int`\nlabels(io)             # returns `NTuple{String}`, trace property labels along all dimensions\nlabels(io,i)           # returns `String`, trace property label along dimension `i::Int`\nunits(io)              # returns `NTuple{String}`, units along all dimensions\nunits(io,i)            # returns `String, unit along dimension `i::Int`\ndomains(io)            # returns `NTuple{String}`, data domains along all dimensions\ndomains(io,i)          # returns `String`, data domain along dimension `i::Int`\npstarts(io)            # returns `NTuple{Float64}`, physical starts along all dimensions\npstarts(io,i)          # returns `Float64`, physical start along dimension `i::Int`\npincs(io)              # returns `NTuple{Float64}`, physical increments along all dimensions\npincs(io,i)            # returns `Float64`, physical increment along dimension `i::Int`\nlstarts(io)            # returns `NTuple{Int32}`, logical starts along all dimensions\nlstarts(io,i)          # returns `Int32`, logical start along dimension `i::Int`\nlincs(io)              # returns `NTuple{Int32}`, logical increments along all dimensions\nlincs(io,i)            # returns `Int32`, logical increment along dimension `i::Int`\nlrange(io)             # returns `NTuple{StepRange{Int64}}`, logical range along all dimensions\nlrange(io,i)           # returns `StepRange{Int64}`, logical range along dimension `i::Int`\nisempty(io)            # returns true if the dataset is empty (without trace or header extents)\nin(prop,io)            # returns true if the trace property `prop` exists in `io` --  `prop` can be of types `::TraceProperty`, `::TracePropertyDef`, or `::String`\ndataproperty(io,nm)    # returns the value held in the data property: `nm::String`\nhasdataproperty(io,nm) # returns true if the data property corresponding to label `nm::String` is in `io::JSeis`\ngeometry(io)           # returns `Geometry`, the stored geometry of the dataset.  If no geometry is stored, `nothing` is returnedConvenience methods are supplied for manipulating io::JSeis:rm(io)                      # remove (delete) the file and all of its extent files and secondary folders\nempty!(io)                  # remove extends and secondary folders, but keep meta-data\ncp(src, dst)                # create a new JavaSeis file `dst::AbstractString` that is a copy of `src::JSeis`, optional named argument: `secondaries=` - change file extents location\nmv(src, dst)                # move a JavaSeis file to `dst::AbstractString` from `src::JSeis`, optional named argument: `secondaries=` - change file extents location\ncopy!(io, hdrs, io1, hdrs1) # copy values from `hdrs1::Array{UInt8,2}` to `hdrs::Array{UInt8,2}`<a id=\'API-1\'></a>"
},

{
    "location": "#API-1",
    "page": "Readme",
    "title": "API",
    "category": "section",
    "text": "TeaSeis.Geometry\nBase.Filesystem.cp\nBase.Filesystem.mv\nBase.Filesystem.rm\nBase.close\nBase.copy!\nBase.empty!\nBase.get\nBase.get\nBase.in\nBase.isempty\nBase.length\nBase.ndims\nBase.read\nBase.read!\nBase.size\nBase.size\nBase.write\nBase.write\nTeaSeis.allocframe\nTeaSeis.allocframehdrs\nTeaSeis.allocframetrcs\nTeaSeis.dataproperty\nTeaSeis.domains\nTeaSeis.domains\nTeaSeis.fold\nTeaSeis.fold\nTeaSeis.geometry\nTeaSeis.hasdataproperty\nTeaSeis.ind2sub\nTeaSeis.jscreate\nTeaSeis.jsopen\nTeaSeis.jsopen\nTeaSeis.labels\nTeaSeis.labels\nTeaSeis.leftjustify!\nTeaSeis.lincs\nTeaSeis.lincs\nTeaSeis.lrange\nTeaSeis.lrange\nTeaSeis.lstarts\nTeaSeis.lstarts\nTeaSeis.pincs\nTeaSeis.pincs\nTeaSeis.prop\nTeaSeis.propdefs\nTeaSeis.propdefs\nTeaSeis.props\nTeaSeis.props\nTeaSeis.pstarts\nTeaSeis.pstarts\nTeaSeis.readframe\nTeaSeis.readframe!\nTeaSeis.readframehdrs\nTeaSeis.readframehdrs!\nTeaSeis.readframetrcs\nTeaSeis.readframetrcs!\nTeaSeis.readhdrs\nTeaSeis.readhdrs!\nTeaSeis.readtrcs\nTeaSeis.readtrcs!\nTeaSeis.regularize!\nTeaSeis.set!\nTeaSeis.units\nTeaSeis.units\nTeaSeis.writeframe\nTeaSeis.writeframe<a id=\'TeaSeis.allocframe-Tuple{JSeis}\' href=\'#TeaSeis.allocframe-Tuple{JSeis}\'>#</a> TeaSeis.allocframe &mdash; Method.allocframe(io)Allocate memory for one frame of JavaSeis dataset.  Returns (Array{Float32,2},Array{UInt8,2}). For example, trcs, hdrs = allocframe(jsopen(\"data.js\")).<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1250-L1255\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.allocframehdrs-Tuple{JSeis}\' href=\'#TeaSeis.allocframehdrs-Tuple{JSeis}\'>#</a> TeaSeis.allocframehdrs &mdash; Method.allocframehdrs(io)Allocate memory for headers for one frame of JavaSeis dataset.  Returns Array{UInt8,2}. For example, hdrs = allocframehdrs(jsopen(\"data.js\")).<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1257-L1262\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.allocframetrcs-Tuple{JSeis}\' href=\'#TeaSeis.allocframetrcs-Tuple{JSeis}\'>#</a> TeaSeis.allocframetrcs &mdash; Method.allocframetrcs(io)Allocate memory for traces for one frame of JavaSeis dataset.  Returns Array{Float32,2}. For example, trcs = allocframetrcs(jsopen(\"data.js\")).<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1264-L1269\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.dataproperty-Tuple{JSeis,String}\' href=\'#TeaSeis.dataproperty-Tuple{JSeis,String}\'>#</a> TeaSeis.dataproperty &mdash; Method.dataproperty(io, label)Get a data property (data properties are per file, rather than per trace) from io::JSeis with label label::String.  For example, dataproperty(jsopen(\"data.js\"), \"FREQUENCY\").<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1220-L1225\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.domains-Tuple{JSeis,Int64}\' href=\'#TeaSeis.domains-Tuple{JSeis,Int64}\'>#</a> TeaSeis.domains &mdash; Method.domains(io, i)Returns the domain of the ith dimension of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2270-L2275\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.domains-Tuple{JSeis}\' href=\'#TeaSeis.domains-Tuple{JSeis}\'>#</a> TeaSeis.domains &mdash; Method.domains(io)Returns the domains of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2263-L2268\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.fold-Tuple{JSeis,Array{UInt8,2}}\' href=\'#TeaSeis.fold-Tuple{JSeis,Array{UInt8,2}}\'>#</a> TeaSeis.fold &mdash; Method.fold(io, hdrs)Compute the fold of a frame where io is JSeis corresponding to the dataset, and hdrs are the headers for the frame. For example: io=jsopen(\"file.js\"); fold(io, readframehdrs(io,1))<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L961-L966\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.fold-Tuple{JSeis,Vararg{Int64,N} where N}\' href=\'#TeaSeis.fold-Tuple{JSeis,Vararg{Int64,N} where N}\'>#</a> TeaSeis.fold &mdash; Method.fold(io, idx...)Compute the fold of a frame where idx is the frame/volume/hypercube indices.  For example, fold(jsopen(\"file.js\"),1) for a 3D dataset, fold(jsopen(\"file.js\",1,2)) for a 4D dataset, and fold(jsopen(\"file.js\"),1,2,3) for a 5D dataset.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L972-L977\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.geometry-Tuple{JSeis}\' href=\'#TeaSeis.geometry-Tuple{JSeis}\'>#</a> TeaSeis.geometry &mdash; Method.geometry(io)If io::JSeis contains a geometry definition, then return a geometry of type Geometry.  Otherwise, return nothing.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2362-L2367\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.hasdataproperty-Tuple{Any,Any}\' href=\'#TeaSeis.hasdataproperty-Tuple{Any,Any}\'>#</a> TeaSeis.hasdataproperty &mdash; Method.hasdataproperty(io, label)return true if io::JSeis contains the data property corresponding to label.  Otherwise, return false.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1235-L1239\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.ind2sub-Tuple{JSeis,Int64}\' href=\'#TeaSeis.ind2sub-Tuple{JSeis,Int64}\'>#</a> TeaSeis.ind2sub &mdash; Method.ind2sub(io, i)Return the (frame,volume...) tuple for the liner index i.  This is useful for looping over all frames in a data-set that is more that 4 or more dimensions. For example,for i = 1:length(io)\n    trcs, hdrs = readframe(io, ind2sub(io,i)...)\nend<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2061-L2073\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.jscreate-Tuple{String}\' href=\'#TeaSeis.jscreate-Tuple{String}\'>#</a> TeaSeis.jscreate &mdash; Method.jscreate(filename)Create a JavaSeis dataset without opening it.  This method has the same optional arguments as jsopen<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L316-L320\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.jsopen-Tuple{String,String}\' href=\'#TeaSeis.jsopen-Tuple{String,String}\'>#</a> TeaSeis.jsopen &mdash; Method.jsopen(filename, mode, [parameters])Open a new or existing JavaSeis dataset with name filename::String and in mode::String. mode can be one of \"r\" (read), \"w\" (write/create) or \"r+\" (read and write). It is convention for filename to havea \".js\" extention.If \"w\" is used for the value of mode, then the axis_lengths named parameter is required, and several optional named function parameters are available:parameterssimilarto::String An existing JavaSeis dataset.  If set, then all other named arguments can be used to modify the data context that belongs to the existing JavaSeis dataset.\ndescription::String Description of dataset, if not set, then a description is parsed from the filename.\nmapped::Bool If the dataset is full (no missing frames/traces), then it may be more efficient to set this to false.  Defaults to true.\ndatatype::String Examples are CMP, SHOT, etc.  If not set, then UNKNOWN is used.\ndataformat::Type Choose from Float32, and Int16.  If not set, then Float32 is used.\ndataorder::String (not supported)\naxis_lengths::Array{Int} size of each dimension (sample/trace/frame/volume/hypercube) of the JavaSeis data context\naxis_propdefs::Array{TracePropertyDef} Trace properties corresponding to JavaSeis axes.  If not set, then SAMPLE, TRACE, FRAME, VOLUME and HYPRCUBE are used.\naxis_units::Array{String} Units corresponding to JavaSeis axes. e.g. SECONDS, METERS, etc.  If not set, then UNKNOWN is used.\naxis_domains::Array{String} Domains corresponding to JavaSeis axes. e.g. SPACE, TIME, etc.  If not set, then UNKNOWN is used.\naxis_lstarts::Array{Int} Logical origins for each axis.  If not set, then 1 is used for the logical origin of each axis.\naxis_lincs::Array{Int} Logical increments for each axis.  If not set, then 1 is used for the logical increments of each axis.\naxis_pstarts::Array{Float64} Physical origins for each axis.  If not set, then 0.0 is used for the physical origin of each axis.\naxis_pincs::Array{Float64} Physical increments for each axis.  If not set, then 1.0 is used for the physical increments of each axis.\ndata_properties::Array{DataProperty} An array of custom trace properties.  These are in addition to the properties listed in SSPROPS.md.\nproperties::Array{TracePropertyDef} An array of custom data properties.  One property per data-set rather than one property per trace as in properties above.\ngeometry::Geometry An optional three point geometry can be embedded in the JavaSeis file.\nsecondaries::Array{String} An array of file-system locations used to store the file extents.  If not set, then primary storage is used.\nnextents::Int64 The number of file-extents used to store the data.  If not set, then a heuristic is used to choose the number of extents.  The heuristic is: min(256,10 + (FRAMEWORK_SIZE)/(2*1024^3)).\nproperties_add::Array{TracePropertyDef} When similarto is specified, use this to add trace properties to those already existing in the similarto file.\nproperties_rm::Array{TracePropertyDef} When similarto is specified, use this to remove trace properties to those already existing in the similarto file.\ndataproperties_add::Array{DataProperty} When similarto is specfied, use this to add dataset properties to those aloready existing in the similarto file.\ndataproperties_rm::Array{DataProperty} When similarto is specified, use this to remove dataset properties to those already existing in the similarto file.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L39-L73\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.jsopen-Tuple{String}\' href=\'#TeaSeis.jsopen-Tuple{String}\'>#</a> TeaSeis.jsopen &mdash; Method.jsopen(filename)Equivalent to jsopen(filename, \"r\")<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L309-L313\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.labels-Tuple{JSeis,Int64}\' href=\'#TeaSeis.labels-Tuple{JSeis,Int64}\'>#</a> TeaSeis.labels &mdash; Method.labels(io, i)Returns the string label of the ith framework axis of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2214-L2219\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.labels-Tuple{JSeis}\' href=\'#TeaSeis.labels-Tuple{JSeis}\'>#</a> TeaSeis.labels &mdash; Method.labels(io)Returns the string labels corresponding to the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2207-L2212\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.leftjustify!-Tuple{JSeis,Array{Float32,2},Array{UInt8,2}}\' href=\'#TeaSeis.leftjustify!-Tuple{JSeis,Array{Float32,2},Array{UInt8,2}}\'>#</a> TeaSeis.leftjustify! &mdash; Method.leftjustify(io, trcs, hdrs)Left justify all live (non-dead) traces in a frame, moving them to the beginning of trcs and hdrs.  See also regularize!<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2079-L2084\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.lincs-Tuple{JSeis,Int64}\' href=\'#TeaSeis.lincs-Tuple{JSeis,Int64}\'>#</a> TeaSeis.lincs &mdash; Method.lincs(io,i)Returns the logical increment of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2326-L2331\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.lincs-Tuple{JSeis}\' href=\'#TeaSeis.lincs-Tuple{JSeis}\'>#</a> TeaSeis.lincs &mdash; Method.lincs(io)Returns the logical increments of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2319-L2324\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.lrange-Tuple{JSeis,Int64}\' href=\'#TeaSeis.lrange-Tuple{JSeis,Int64}\'>#</a> TeaSeis.lrange &mdash; Method.lrange(io, i)Returns the logical range of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2340-L2345\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.lrange-Tuple{JSeis}\' href=\'#TeaSeis.lrange-Tuple{JSeis}\'>#</a> TeaSeis.lrange &mdash; Method.lrange(io)Returns the logical ranges of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2333-L2338\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.lstarts-Tuple{JSeis,Int64}\' href=\'#TeaSeis.lstarts-Tuple{JSeis,Int64}\'>#</a> TeaSeis.lstarts &mdash; Method.lstarts(io,i)Returns the logical start of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2312-L2317\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.lstarts-Tuple{JSeis}\' href=\'#TeaSeis.lstarts-Tuple{JSeis}\'>#</a> TeaSeis.lstarts &mdash; Method.lstarts(io)Returns the logical start of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2305-L2310\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.pincs-Tuple{JSeis,Int64}\' href=\'#TeaSeis.pincs-Tuple{JSeis,Int64}\'>#</a> TeaSeis.pincs &mdash; Method.pincs(io, i)Returns the physical increments of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2298-L2303\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.pincs-Tuple{JSeis}\' href=\'#TeaSeis.pincs-Tuple{JSeis}\'>#</a> TeaSeis.pincs &mdash; Method.pincs(io)Returns the physical increments of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2291-L2296\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.prop-Tuple{JSeis,Symbol}\' href=\'#TeaSeis.prop-Tuple{JSeis,Symbol}\'>#</a> TeaSeis.prop &mdash; Method.prop(io, propertyname[, proptype=Any])Get a trace property from io::JSeis where propertyname is either String or TracePropertyDef. Note that if  propertyname is a String, then this method produces a type-unstable result. For example:io = jsopen(\"data.js\")\np = prop(io, \"REC_X\")            # using a `String`, output type of prop is not inferred\np = prop(io, \"REC_X\", Float32)   # using a `String`, output type of prop is inferred using `Float32`\np = prop(io, stockprop[:REC_X])  # using a `TracePropertyDef`, output type of prop is inferredNote that in the examples above, the string \"RECX\" can be replaced by the symbol `RECX`.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1143-L1158\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.propdefs-Tuple{JSeis,Int64}\' href=\'#TeaSeis.propdefs-Tuple{JSeis,Int64}\'>#</a> TeaSeis.propdefs &mdash; Method.propdefs(io, i)Returns the property definition of the ith framework axis of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2228-L2233\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.propdefs-Tuple{JSeis}\' href=\'#TeaSeis.propdefs-Tuple{JSeis}\'>#</a> TeaSeis.propdefs &mdash; Method.propdefs(io)Returns the property definitions of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2221-L2226\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.props-Tuple{JSeis,Int64}\' href=\'#TeaSeis.props-Tuple{JSeis,Int64}\'>#</a> TeaSeis.props &mdash; Method.props(io, i)Returns the trace property of the ith framework axis of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2242-L2247\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.props-Tuple{JSeis}\' href=\'#TeaSeis.props-Tuple{JSeis}\'>#</a> TeaSeis.props &mdash; Method.props(io)Returns the trace properties of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2235-L2240\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.pstarts-Tuple{JSeis,Int64}\' href=\'#TeaSeis.pstarts-Tuple{JSeis,Int64}\'>#</a> TeaSeis.pstarts &mdash; Method.pstarts(io, i)Returns the physical start of the ith dimension of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2284-L2289\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.pstarts-Tuple{JSeis}\' href=\'#TeaSeis.pstarts-Tuple{JSeis}\'>#</a> TeaSeis.pstarts &mdash; Method.pstarts(io)Returns the physical start of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2277-L2282\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readframe!-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Vararg{Int64,N} where N}\' href=\'#TeaSeis.readframe!-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Vararg{Int64,N} where N}\'>#</a> TeaSeis.readframe! &mdash; Method.readframe!(io, trcs, hdrs, idx...)In-place read of a single frame from a JavaSeis dataset.  For non full frame, the resulting traces and headers are left justified.  Examples:3D:io = jsopen(\"data_3D.js\")\ntrcs, hdrs = allocframe(io)\nfrm_idx = 1\nreadframe!(io, trcs, hdrs, frm_idx)4D:io = jsopen(\"data_4D.js\")\ntrcs, hdrs = allocframe(io)\nfrm_idx, vol_idx = 1, 1\nreadframe!(io, trcs, hdrs, frm_idx, vol_idx)5D:io = jsopen(\"data_5D.js\")\ntrcs, hdrs = allocframe(io)\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nreadframe!(io, trcs, hdrs, frm_idx, vol_idx, hyp_idx)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1341-L1373\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readframe-Tuple{JSeis,Vararg{Int64,N} where N}\' href=\'#TeaSeis.readframe-Tuple{JSeis,Vararg{Int64,N} where N}\'>#</a> TeaSeis.readframe &mdash; Method.readframe(io, idx...)Out-of-place read of a single frame from a JavaSeis dataset.  For non full frame, the resulting traces and headers are left justified.  Examples:3D:frm_idx = 1\ntrcs, hdrs = readframe(jsopen(\"data_3D.js\"), frm_idx)4D:frm_idx, vol_idx = 1, 1\ntrcs, hdrs = readframe(jsopen(\"data_4D.js\"), frm_idx, vol_idx)5D:frm_idx, vol_idx, hyp_idx = 1, 1, 1\ntrcs, hdrs = readframe(jsopen(\"data_5D.js\"), frm_idx, vol_idx, hyp_idx)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1377-L1403\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readframehdrs!-Tuple{JSeis,AbstractArray{UInt8,2},Vararg{Int64,N} where N}\' href=\'#TeaSeis.readframehdrs!-Tuple{JSeis,AbstractArray{UInt8,2},Vararg{Int64,N} where N}\'>#</a> TeaSeis.readframehdrs! &mdash; Method.readframehdrs!(io, hdrs, idx...)In-place read of a single frame from a JavaSeis dataset (headers only).  For non full frame, the resulting headers are left justified.  Examples:3D:io = jsopen(\"data_3D.js\")\nhdrs = allocframehdrs(io)\nfrm_idx = 1\nreadframehdrs!(io, hdrs, frm_idx)4D:io = jsopen(\"data_4D.js\")\nhdrs = allocframehdrs(io)\nfrm_idx, vol_idx = 1, 1\nreadframehdrs!(io, hdrs, frm_idx, vol_idx)5D:io = jsopen(\"data_5D.js\")\nhdrs = allocframehdrs(io)\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nreadframehdrs!(io, hdrs, frm_idx, vol_idx, hyp_idx)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1473-L1505\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readframehdrs-Tuple{JSeis,Vararg{Int64,N} where N}\' href=\'#TeaSeis.readframehdrs-Tuple{JSeis,Vararg{Int64,N} where N}\'>#</a> TeaSeis.readframehdrs &mdash; Method.readframehdrs(io, idx...)Out-of-place read of a single frame (headers only) from a JavaSeis dataset.  For non full frame, the resulting headers are left justified.  Examples:3D:frm_idx = 1\nhdrs = readframehdrs(jsopen(\"data_3D.js\"), frm_idx)4D:frm_idx, vol_idx = 1, 1\nhdrs = readframehdrs(jsopen(\"data_4D.js\"), frm_idx, vol_idx)5D:frm_idx, vol_idx, hyp_idx = 1, 1, 1\nhdrs = readframehdrs(jsopen(\"data_5D.js\"), frm_idx, vol_idx, hyp_idx)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1509-L1535\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readframetrcs!-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N}\' href=\'#TeaSeis.readframetrcs!-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N}\'>#</a> TeaSeis.readframetrcs! &mdash; Method.readframetrcs!(io, trcs, hdrs, idx...)In-place read of a single frame from a JavaSeis dataset (traces only).  For non full frame, the resulting traces are left justified.  Examples:3D:io = jsopen(\"data_3D.js\")\ntrcs = allocframetrcs(io)\nfrm_idx = 1\nreadframetrcs!(io, trcs, frm_idx)4D:io = jsopen(\"data_4D.js\")\ntrcs = allocframetrcs(io)\nfrm_idx, vol_idx = 1, 1\nreadframetrcs!(io, trcs, frm_idx, vol_idx)5D:io = jsopen(\"data_5D.js\")\ntrcs = allocframetrcs(io)\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nreadframetrcs!(io, trcs, frm_idx, vol_idx, hyp_idx)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1407-L1439\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readframetrcs-Tuple{JSeis,Vararg{Int64,N} where N}\' href=\'#TeaSeis.readframetrcs-Tuple{JSeis,Vararg{Int64,N} where N}\'>#</a> TeaSeis.readframetrcs &mdash; Method.readframetrcs(io, idx...)Out-of-place read of a single frame (traces only) from a JavaSeis dataset.  For non full frame, the resulting traces are left justified.  Examples:3D:frm_idx = 1\ntrcs = readframetrcs(jsopen(\"data_3D.js\"), frm_idx)4D:frm_idx, vol_idx = 1, 1\ntrcs = readframetrcs(jsopen(\"data_4D.js\"), frm_idx, vol_idx)5D:frm_idx, vol_idx, hyp_idx = 1, 1, 1\ntrcs = readframetrcs(jsopen(\"data_5D.js\"), frm_idx, vol_idx, hyp_idx)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1443-L1469\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readhdrs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#TeaSeis.readhdrs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> TeaSeis.readhdrs! &mdash; Method.readhdrs!(io, hdrs, smp_range, trace_range, range...)In-place read of a subset of data (headers only) from a JavaSeis file. If performance is important, then consider using readframehdrs! instead.  Examples:3D:readhdrs!(jsopen(\"data_3D.js\"), hdrs, :, :, :)\nreadhdrs!(jsopen(\"data_3D.js\"), hdrs, :, 1:2:end, 1:5)4D:readhdrs!(jsopen(\"data_4D.js\"), hdrs, :, :, :, :)\nreadhdrs!(jsopen(\"data_4D.js\"), hdrs, :, :, 2, 2:2:10)5D:readhdrs!(jsopen(\"data_5D.js\"), hdrs, :, :, :, :, :)\nreadhdrs!(jsopen(\"data_5D.js\"), hdrs, :, :, 2, 2:2:10, 1:10)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1687-L1713\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readhdrs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#TeaSeis.readhdrs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> TeaSeis.readhdrs &mdash; Method.readhdrs(io, trace_range, range...)Out-of-place read of a subset of data (headers only) from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using readframetrcs instead.  Examples:3D:hdrs = readhdrs(jsopen(\"data_3D.js\"), :, :, :)\nhdrs = readhdrs(jsopen(\"data_3D.js\"), :, 1:2:end, 1:5)4D:hdrs = readhdrs(jsopen(\"data_4D.js\"), :, :, :, :)\nhdrs = readhdrs(jsopen(\"data_4D.js\"), :, :, 2, 2:2:10)5D:hdrs = readhdrs(jsopen(\"data_5D.js\"), :, :, :, :, :)\nhdrs = readhdrs(jsopen(\"data_5D.js\"), :, :, 2, 2:2:10, 1:10)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1721-L1746\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readtrcs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#TeaSeis.readtrcs!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> TeaSeis.readtrcs! &mdash; Method.readtrcs!(io, trcs, sample_range, trace_range, range...)In-place read of a subset of data (traces only) from a JavaSeis file. If performance is important, then consider using readframetrcs! instead.  Examples:3D:readtrcs!(jsopen(\"data_3D.js\"), trcs, :, :, :)\nreadtrcs!(jsopen(\"data_3D.js\"), trcs, :, 1:2:end, 1:5)4D:readtrcs!(jsopen(\"data_4D.js\"), trcs, :, :, :, :)\nreadtrcs!(jsopen(\"data_4D.js\"), trcs, :, :, 2, 2:2:10)5D:readtrcs!(jsopen(\"data_5D.js\"), trcs, :, :, :, :, :)\nreadtrcs!(jsopen(\"data_5D.js\"), trcs, :, :, 2, 2:2:10, 1:10)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1621-L1646\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.readtrcs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#TeaSeis.readtrcs-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> TeaSeis.readtrcs &mdash; Method.readtrcs(io, sample_range, trace_range, range...)Out-of-place read of a subset of data (traces only) from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using readframetrcs instead.  Examples:3D:trcs = readtrcs(jsopen(\"data_3D.js\"), :, :, :)\ntrcs = readtrcs(jsopen(\"data_3D.js\"), :, 1:2:end, 1:5)4D:trcs = readtrcs(jsopen(\"data_4D.js\"), :, :, :, :)\ntrcs = readtrcs(jsopen(\"data_4D.js\"), :, :, 2, 2:2:10)5D:trcs = readtrcs(jsopen(\"data_5D.js\"), :, :, :, :, :)\ntrcs = readtrcs(jsopen(\"data_5D.js\"), :, :, 2, 2:2:10, 1:10)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1653-L1679\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.regularize!-Tuple{JSeis,Array{Float32,2},Array{UInt8,2}}\' href=\'#TeaSeis.regularize!-Tuple{JSeis,Array{Float32,2},Array{UInt8,2}}\'>#</a> TeaSeis.regularize! &mdash; Method.regularize!(io, trcs, hdrs)Regularize the traces in a frame, moving them from their left-justified state, to one that reflects their trace location within a frame according to their trace framework definition.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2143-L2148\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.set!-Union{Tuple{T}, Tuple{TraceProperty,AbstractArray{UInt8,2},Int64,T}} where T<:Number\' href=\'#TeaSeis.set!-Union{Tuple{T}, Tuple{TraceProperty,AbstractArray{UInt8,2},Int64,T}} where T<:Number\'>#</a> TeaSeis.set! &mdash; Method.set!(prop, hdrs, i, value)Set the value of the trace property prop::TraceProperty stored in the header of the ith column of hdrs::Array{UInt8,2} to value::T.  For example, io=jsopen(\"test.js\"); hdrs=readframehdrs(io,1); set!(prop(io,\"REC_X\"), 1, 10.0).<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1117-L1123\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.units-Tuple{JSeis,Int64}\' href=\'#TeaSeis.units-Tuple{JSeis,Int64}\'>#</a> TeaSeis.units &mdash; Method.units(io, i)Returns the unit of measure of the ith dimension of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2256-L2261\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.units-Tuple{JSeis}\' href=\'#TeaSeis.units-Tuple{JSeis}\'>#</a> TeaSeis.units &mdash; Method.units(io)Returns the unit of measure of the framework axes of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2249-L2254\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Int64}\' href=\'#TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},AbstractArray{UInt8,2},Int64}\'>#</a> TeaSeis.writeframe &mdash; Method.writeframe(io, trcs, hdrs)Write a frame of data to the JavaSeis dataset corresponding to io::JSeis.  trcs and hdrs are 2-dimensional arrays. The location of the dataset written to is determined by the values of the framework headers stored in hdrs.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1866-L1871\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N}\' href=\'#TeaSeis.writeframe-Tuple{JSeis,AbstractArray{Float32,2},Vararg{Int64,N} where N}\'>#</a> TeaSeis.writeframe &mdash; Method.writeframe(io, trcs, idx...)Write a frame of data to the JavaSeis dataset corresponding to io::JSeis.  trcs is a 2-dimensional array.  The location of the datset written to is determined by idx....  For example:3D:writeframe(jsopen(\"data_3D.js\"), trcs, 1) # write to frame 14D:writeframe(jsopen(\"data_4D.js\"), trcs, 1, 2) # write to frame 1, volume 25D:writeframe(jsopen(\"data_5D.js\"), trcs, 1, 2, 3) # write to frame 1, volume 2, hypercube 3<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1878-L1901\' class=\'documenter-source\'>source</a><br><a id=\'TeaSeis.Geometry-Tuple{}\' href=\'#TeaSeis.Geometry-Tuple{}\'>#</a> TeaSeis.Geometry &mdash; Method.g = Geometry(;ox=0.0,oy=0.0,oz=0.0,ux=1.0,uy=0.0,uz=0.0,vx=0.0,vy=1.0,vz=0.0,wx=0.0,wy=0.0,wz=1.0,u1=0,un=0,v1=0,vn=0,w1=0,wn=0)where g::Geometry.  The named arguments are:ox=0.0,oy=0.0,oz=0.0 origin of axes\nux=1.0,uy=0.0,uz=0.0 end of u-vector (e.g. end of first in-line, in the cross-line direction\nvx=0.0,vy=1.0,vz=0.0 end of v-vector (e.g. end of first cross-line, in the in-line direction\nwx=0.0,wy=0.0,wz=1.0 end of depth axis\nu1=1 minimum index along the u-vector (e.g. maximum cross-line index)\nun=2 maximum index along the u-vector (e.g. maximum cross-line index)\nv1=1 minimum index along the v-vector (e.g. minimum in-line index)\nvn=2 maximum index along the v-vector (e.g. maximum in-line index)\nw1=1 minimum depth index\nwn=2 maximum depth index<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/geometry.jl#L22-L37\' class=\'documenter-source\'>source</a><br><a id=\'Base.Filesystem.cp-Tuple{JSeis,AbstractString}\' href=\'#Base.Filesystem.cp-Tuple{JSeis,AbstractString}\'>#</a> Base.Filesystem.cp &mdash; Method.cp(src, dst, [secondaries=nothing])Copy a file from src (of type JSeis) to dst of type String.  For example, cp(jsopen(\"copyfrom.js\"), \"copyto.js\"). Use the optional named argument secondaries to change the JavaSeis secondary location.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L379-L384\' class=\'documenter-source\'>source</a><br><a id=\'Base.Filesystem.mv-Tuple{JSeis,AbstractString}\' href=\'#Base.Filesystem.mv-Tuple{JSeis,AbstractString}\'>#</a> Base.Filesystem.mv &mdash; Method.mv(src, dst, [secondaries=nothing])Move a file from src (of type JSeis) to dst of type String.  For example, cp(jsopen(\"movefrom.js\"), \"moveto.js\"). Use the optional named argument secondaries to change the JavaSeis secondary location.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L397-L402\' class=\'documenter-source\'>source</a><br><a id=\'Base.Filesystem.rm-Tuple{JSeis}\' href=\'#Base.Filesystem.rm-Tuple{JSeis}\'>#</a> Base.Filesystem.rm &mdash; Method.rm(io)Remove a JavaSeis dataset from disk.  For example: rm(jsopen(\"deleteme.js\"))<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L332-L336\' class=\'documenter-source\'>source</a><br><a id=\'Base.close-Tuple{JSeis}\' href=\'#Base.close-Tuple{JSeis}\'>#</a> Base.close &mdash; Method.close(io)Close an open JavaSeis dataset where io is of type JSeis created using, for example, jsopen.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L323-L327\' class=\'documenter-source\'>source</a><br><a id=\'Base.copy!-Tuple{JSeis,AbstractArray{UInt8,2},JSeis,AbstractArray{UInt8,2}}\' href=\'#Base.copy!-Tuple{JSeis,AbstractArray{UInt8,2},JSeis,AbstractArray{UInt8,2}}\'>#</a> Base.copy! &mdash; Method.copy!(ioout, hdrsout, ioin, hdrsin)Copy trace headers from hdrsin::Array{Uint8,2} to hdrsout::Array{Uint8,2} and where hdrsin corresponds to ioin::JSeis and hdrsout corresponds to ioout::JSeis.  For example,ioin = jsopen(\"data1.js\")\nioout = jsopen(\"data2.js\")\nhdrsin = readframehdrs(ioin,1)\nhdrsout = readframehdrs(ioout,1)\ncopy!(ioout, hdrsout, ioin, hdrsin)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1165-L1178\' class=\'documenter-source\'>source</a><br><a id=\'Base.empty!-Tuple{JSeis}\' href=\'#Base.empty!-Tuple{JSeis}\'>#</a> Base.empty! &mdash; Method.empty!(io)Empty a JavaSeis dataset from disk, retaining the meta-information.  For example: empty!(jsopen(\"emptyme.js\"))<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L344-L348\' class=\'documenter-source\'>source</a><br><a id=\'Base.get-Tuple{TeaSeis.TraceProperty,AbstractArray{UInt8,2},Int64}\' href=\'#Base.get-Tuple{TeaSeis.TraceProperty,AbstractArray{UInt8,2},Int64}\'>#</a> Base.get &mdash; Method.get(prop, hdrs, i)Get the value of the trace property prop::TraceProperty stored in the header of the ith column of hdrs::Array{UInt8,2}.  For example, io=jsopen(\"data.js\"); get(prop(io, \"REC_X\"), readframehdrs(io,1), 1).<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1109-L1114\' class=\'documenter-source\'>source</a><br><a id=\'Base.get-Union{Tuple{T}, Tuple{TraceProperty{T},AbstractArray{UInt8,1}}} where T<:Number\' href=\'#Base.get-Union{Tuple{T}, Tuple{TraceProperty{T},AbstractArray{UInt8,1}}} where T<:Number\'>#</a> Base.get &mdash; Method.get(prop, hdr)Get the value of the trace property prop::TraceProperty stored in the header hdr::Array{UInt8,1}.  For example, io=jsopen(\"data.js\"); get(prop(io, \"REC_X\"), readframehdrs(io,1)[:,1])<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1088-L1093\' class=\'documenter-source\'>source</a><br><a id=\'Base.in-Tuple{Union{String, TraceProperty, TracePropertyDef},JSeis}\' href=\'#Base.in-Tuple{Union{String, TraceProperty, TracePropertyDef},JSeis}\'>#</a> Base.in &mdash; Method.in(trace_property, io)Returns true if trace_property is in the header catalog of io::JSeis, and where trace_property is one of String, TracePropertyDef or TraceProperty.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2354-L2359\' class=\'documenter-source\'>source</a><br><a id=\'Base.isempty-Tuple{JSeis}\' href=\'#Base.isempty-Tuple{JSeis}\'>#</a> Base.isempty &mdash; Method.isempty(io)Returns true if the dataset correpsonding to io is empty (contains no data), and false otherwise.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2347-L2352\' class=\'documenter-source\'>source</a><br><a id=\'Base.length-Tuple{JSeis}\' href=\'#Base.length-Tuple{JSeis}\'>#</a> Base.length &mdash; Method.length(io)Returns the number of frames in a JavaSeis dataset corresponding to io::JSeis. This is equivalent to prod(size(io)[3:end]), and is useful for iterating over all frames in a JavaSeis dataset.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2199-L2205\' class=\'documenter-source\'>source</a><br><a id=\'Base.ndims-Tuple{JSeis}\' href=\'#Base.ndims-Tuple{JSeis}\'>#</a> Base.ndims &mdash; Method.ndims(io)Returns the numbers of dimensions of the JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2181-L2185\' class=\'documenter-source\'>source</a><br><a id=\'Base.read!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#Base.read!-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,AbstractArray{UInt8,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> Base.read! &mdash; Method.read!(io, trcs, sample_range, trace_range, range...)In-place read of a subset of data from a JavaSeis file. If performance is important, then consider using readframe! instead.  Examples:3D:read!(jsopen(\"data_3D.js\"), trcs, hdrs, :, :, :)\nread!(jsopen(\"data_3D.js\"), trcs, hdrs, :, 1:2:end, 1:5)4D:read!(jsopen(\"data_4D.js\"), trcs, hdrs, :, :, :, :)\nread!(jsopen(\"data_4D.js\"), trcs, hdrs, :, :, 2, 2:2:10)5D:read!(jsopen(\"data_5D.js\"), trcs, hdrs, :, :, :, :, :)\nread!(jsopen(\"data_5D.js\"), trcs, hdrs, :, :, 2, 2:2:10, 1:10)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1755-L1780\' class=\'documenter-source\'>source</a><br><a id=\'Base.read-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#Base.read-Union{Tuple{N}, Tuple{JSeis,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> Base.read &mdash; Method.read(io, sample_range, trace_range, range...)Out-of-place read of a subset of data from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using readframetrcs instead.  Examples:3D:trcs, hdrs = read(jsopen(\"data_3D.js\"), :, :, :)\ntrcs, hdrs = read(jsopen(\"data_3D.js\"), :, 1:2:end, 1:5)4D:trcs, hdrs = read(jsopen(\"data_4D.js\"), :, :, :, :)\ntrcs, hdrs = read(jsopen(\"data_4D.js\"), :, :, 2, 2:2:10)5D:trcs, hdrs = read(jsopen(\"data_5D.js\"), :, :, :, :, :)\ntrcs, hdrs = read(jsopen(\"data_5D.js\"), :, :, 2, 2:2:10, 1:10)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1788-L1813\' class=\'documenter-source\'>source</a><br><a id=\'Base.size-Tuple{JSeis,Int64}\' href=\'#Base.size-Tuple{JSeis,Int64}\'>#</a> Base.size &mdash; Method.size(io, i)Returns the lenth of dimension i of a JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2193-L2197\' class=\'documenter-source\'>source</a><br><a id=\'Base.size-Tuple{JSeis}\' href=\'#Base.size-Tuple{JSeis}\'>#</a> Base.size &mdash; Method.size(io)Returns the lenths of all dimensions (as a tuple of integers) of a JavaSeis dataset corresponding to io::JSeis.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L2187-L2191\' class=\'documenter-source\'>source</a><br><a id=\'Base.write\' href=\'#Base.write\'>#</a> Base.write &mdash; Function.write(io, trcs, hdrs[, smprng=:])Write trcs and hdrs to the file corresponding to io::JSeis.  Optionally, you can limit which samples are written. The locations that are written to are determined by the values corresponding to the framework headers hdrs.  Note that the dimension of the arrays trcs and hdrs must match the number of dimensions in the framework.<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1923-L1929\' class=\'documenter-source\'>source</a><br><a id=\'Base.write-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\' href=\'#Base.write-Union{Tuple{N}, Tuple{JSeis,AbstractArray{Float32,N} where N,Vararg{Union{Colon, Int64, AbstractRange{Int64}},N}}} where N\'>#</a> Base.write &mdash; Method.write(io, trcs, sample_range, trace_range, range...)Write trcs to the JavaSeis file corresponding to io::JSeis.  the dimension of trcs must be the same as the dimension of io, and the size of each dimension corresponds to range.  Examples:3D:write(io, trcs, :, :, :)4D:write(io, trcs, :, :, :, :)5D:write(io, trcs, :, :, :, :, :)<a target=\'_blank\' href=\'https://github.com/ChevronETC/TeaSeis.jl/blob/04c87533275c40591277fc17fb0f44906585af77/src/teaseisio.jl#L1961-L1984\' class=\'documenter-source\'>source</a><br>"
},

{
    "location": "autodocs/#TeaSeis.Geometry",
    "page": "Docstrings",
    "title": "TeaSeis.Geometry",
    "category": "type",
    "text": "g = Geometry(;ox=0.0,oy=0.0,oz=0.0,ux=1.0,uy=0.0,uz=0.0,vx=0.0,vy=1.0,vz=0.0,wx=0.0,wy=0.0,wz=1.0,u1=0,un=0,v1=0,vn=0,w1=0,wn=0)\n\nwhere g::Geometry.  The named arguments are:\n\nox=0.0,oy=0.0,oz=0.0 origin of axes\nux=1.0,uy=0.0,uz=0.0 end of u-vector (e.g. end of first in-line, in the cross-line direction\nvx=0.0,vy=1.0,vz=0.0 end of v-vector (e.g. end of first cross-line, in the in-line direction\nwx=0.0,wy=0.0,wz=1.0 end of depth axis\nu1=1 minimum index along the u-vector (e.g. maximum cross-line index)\nun=2 maximum index along the u-vector (e.g. maximum cross-line index)\nv1=1 minimum index along the v-vector (e.g. minimum in-line index)\nvn=2 maximum index along the v-vector (e.g. maximum in-line index)\nw1=1 minimum depth index\nwn=2 maximum depth index\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.allocframe",
    "page": "Docstrings",
    "title": "TeaSeis.allocframe",
    "category": "function",
    "text": "allocframe(io)\n\nAllocate memory for one frame of JavaSeis dataset.  Returns (Array{Float32,2},Array{UInt8,2}). For example, trcs, hdrs = allocframe(jsopen(\"data.js\")).\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.allocframehdrs",
    "page": "Docstrings",
    "title": "TeaSeis.allocframehdrs",
    "category": "function",
    "text": "allocframehdrs(io)\n\nAllocate memory for headers for one frame of JavaSeis dataset.  Returns Array{UInt8,2}. For example, hdrs = allocframehdrs(jsopen(\"data.js\")).\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.allocframetrcs",
    "page": "Docstrings",
    "title": "TeaSeis.allocframetrcs",
    "category": "function",
    "text": "allocframetrcs(io)\n\nAllocate memory for traces for one frame of JavaSeis dataset.  Returns Array{Float32,2}. For example, trcs = allocframetrcs(jsopen(\"data.js\")).\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.dataproperty",
    "page": "Docstrings",
    "title": "TeaSeis.dataproperty",
    "category": "function",
    "text": "dataproperty(io, label)\n\nGet a data property (data properties are per file, rather than per trace) from io::JSeis with label label::String.  For example, dataproperty(jsopen(\"data.js\"), \"FREQUENCY\").\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.domains",
    "page": "Docstrings",
    "title": "TeaSeis.domains",
    "category": "function",
    "text": "domains(io)\n\nReturns the domains of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\ndomains(io, i)\n\nReturns the domain of the ith dimension of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.fold",
    "page": "Docstrings",
    "title": "TeaSeis.fold",
    "category": "function",
    "text": "fold(io, hdrs)\n\nCompute the fold of a frame where io is JSeis corresponding to the dataset, and hdrs are the headers for the frame. For example: io=jsopen(\"file.js\"); fold(io, readframehdrs(io,1))\n\n\n\n\n\nfold(io, idx...)\n\nCompute the fold of a frame where idx is the frame/volume/hypercube indices.  For example, fold(jsopen(\"file.js\"),1) for a 3D dataset, fold(jsopen(\"file.js\",1,2)) for a 4D dataset, and fold(jsopen(\"file.js\"),1,2,3) for a 5D dataset.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.geometry",
    "page": "Docstrings",
    "title": "TeaSeis.geometry",
    "category": "function",
    "text": "geometry(io)\n\nIf io::JSeis contains a geometry definition, then return a geometry of type Geometry.  Otherwise, return nothing.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.hasdataproperty",
    "page": "Docstrings",
    "title": "TeaSeis.hasdataproperty",
    "category": "function",
    "text": "hasdataproperty(io, label)\n\nreturn true if io::JSeis contains the data property corresponding to label.  Otherwise, return false.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.ind2sub",
    "page": "Docstrings",
    "title": "TeaSeis.ind2sub",
    "category": "function",
    "text": "ind2sub(io, i)\n\nReturn the (frame,volume...) tuple for the liner index i.  This is useful for looping over all frames in a data-set that is more that 4 or more dimensions. For example,\n\nfor i = 1:length(io)\n    trcs, hdrs = readframe(io, ind2sub(io,i)...)\nend\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.jscreate",
    "page": "Docstrings",
    "title": "TeaSeis.jscreate",
    "category": "function",
    "text": "jscreate(filename)\n\nCreate a JavaSeis dataset without opening it.  This method has the same optional arguments as jsopen\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.jsopen",
    "page": "Docstrings",
    "title": "TeaSeis.jsopen",
    "category": "function",
    "text": "jsopen(filename, mode, [parameters])\n\nOpen a new or existing JavaSeis dataset with name filename::String and in mode::String. mode can be one of \"r\" (read), \"w\" (write/create) or \"r+\" (read and write). It is convention for filename to havea \".js\" extention.\n\nIf \"w\" is used for the value of mode, then the axis_lengths named parameter is required, and several optional named function parameters are available:\n\nparameters\n\nsimilarto::String An existing JavaSeis dataset.  If set, then all other named arguments can be used to modify the data context that belongs to the existing JavaSeis dataset.\ndescription::String Description of dataset, if not set, then a description is parsed from the filename.\nmapped::Bool If the dataset is full (no missing frames/traces), then it may be more efficient to set this to false.  Defaults to true.\ndatatype::String Examples are CMP, SHOT, etc.  If not set, then UNKNOWN is used.\ndataformat::Type Choose from Float32, and Int16.  If not set, then Float32 is used.\ndataorder::String (not supported)\naxis_lengths::Array{Int} size of each dimension (sample/trace/frame/volume/hypercube) of the JavaSeis data context\naxis_propdefs::Array{TracePropertyDef} Trace properties corresponding to JavaSeis axes.  If not set, then SAMPLE, TRACE, FRAME, VOLUME and HYPRCUBE are used.\naxis_units::Array{String} Units corresponding to JavaSeis axes. e.g. SECONDS, METERS, etc.  If not set, then UNKNOWN is used.\naxis_domains::Array{String} Domains corresponding to JavaSeis axes. e.g. SPACE, TIME, etc.  If not set, then UNKNOWN is used.\naxis_lstarts::Array{Int} Logical origins for each axis.  If not set, then 1 is used for the logical origin of each axis.\naxis_lincs::Array{Int} Logical increments for each axis.  If not set, then 1 is used for the logical increments of each axis.\naxis_pstarts::Array{Float64} Physical origins for each axis.  If not set, then 0.0 is used for the physical origin of each axis.\naxis_pincs::Array{Float64} Physical increments for each axis.  If not set, then 1.0 is used for the physical increments of each axis.\ndata_properties::Array{DataProperty} An array of custom trace properties.  These are in addition to the properties listed in SSPROPS.md.\nproperties::Array{TracePropertyDef} An array of custom data properties.  One property per data-set rather than one property per trace as in properties above.\ngeometry::Geometry An optional three point geometry can be embedded in the JavaSeis file.\nsecondaries::Array{String} An array of file-system locations used to store the file extents.  If not set, then primary storage is used.\nnextents::Int64 The number of file-extents used to store the data.  If not set, then a heuristic is used to choose the number of extents.  The heuristic is: min(256,10 + (FRAMEWORK_SIZE)/(2*1024^3)).\nproperties_add::Array{TracePropertyDef} When similarto is specified, use this to add trace properties to those already existing in the similarto file.\nproperties_rm::Array{TracePropertyDef} When similarto is specified, use this to remove trace properties to those already existing in the similarto file.\ndataproperties_add::Array{DataProperty} When similarto is specfied, use this to add dataset properties to those aloready existing in the similarto file.\ndataproperties_rm::Array{DataProperty} When similarto is specified, use this to remove dataset properties to those already existing in the similarto file.\n\n\n\n\n\njsopen(filename)\n\nEquivalent to jsopen(filename, \"r\")\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.labels",
    "page": "Docstrings",
    "title": "TeaSeis.labels",
    "category": "function",
    "text": "labels(io)\n\nReturns the string labels corresponding to the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\nlabels(io, i)\n\nReturns the string label of the ith framework axis of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.leftjustify!",
    "page": "Docstrings",
    "title": "TeaSeis.leftjustify!",
    "category": "function",
    "text": "leftjustify(io, trcs, hdrs)\n\nLeft justify all live (non-dead) traces in a frame, moving them to the beginning of trcs and hdrs.  See also regularize!\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.lincs",
    "page": "Docstrings",
    "title": "TeaSeis.lincs",
    "category": "function",
    "text": "lincs(io)\n\nReturns the logical increments of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\nlincs(io,i)\n\nReturns the logical increment of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.lrange",
    "page": "Docstrings",
    "title": "TeaSeis.lrange",
    "category": "function",
    "text": "lrange(io)\n\nReturns the logical ranges of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\nlrange(io, i)\n\nReturns the logical range of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.lstarts",
    "page": "Docstrings",
    "title": "TeaSeis.lstarts",
    "category": "function",
    "text": "lstarts(io)\n\nReturns the logical start of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\nlstarts(io,i)\n\nReturns the logical start of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.pincs",
    "page": "Docstrings",
    "title": "TeaSeis.pincs",
    "category": "function",
    "text": "pincs(io)\n\nReturns the physical increments of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\npincs(io, i)\n\nReturns the physical increments of the framework axes for dimension i of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.prop",
    "page": "Docstrings",
    "title": "TeaSeis.prop",
    "category": "function",
    "text": "prop(io, propertyname[, proptype=Any])\n\nGet a trace property from io::JSeis where propertyname is either String or TracePropertyDef. Note that if  propertyname is a String, then this method produces a type-unstable result. For example:\n\nio = jsopen(\"data.js\")\np = prop(io, \"REC_X\")            # using a `String`, output type of prop is not inferred\np = prop(io, \"REC_X\", Float32)   # using a `String`, output type of prop is inferred using `Float32`\np = prop(io, stockprop[:REC_X])  # using a `TracePropertyDef`, output type of prop is inferred\n\nNote that in the examples above, the string \"RECX\" can be replaced by the symbol `RECX`.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.propdefs",
    "page": "Docstrings",
    "title": "TeaSeis.propdefs",
    "category": "function",
    "text": "propdefs(io)\n\nReturns the property definitions of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\npropdefs(io, i)\n\nReturns the property definition of the ith framework axis of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.props",
    "page": "Docstrings",
    "title": "TeaSeis.props",
    "category": "function",
    "text": "props(io)\n\nReturns the trace properties of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\nprops(io, i)\n\nReturns the trace property of the ith framework axis of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.pstarts",
    "page": "Docstrings",
    "title": "TeaSeis.pstarts",
    "category": "function",
    "text": "pstarts(io)\n\nReturns the physical start of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\npstarts(io, i)\n\nReturns the physical start of the ith dimension of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readframe",
    "page": "Docstrings",
    "title": "TeaSeis.readframe",
    "category": "function",
    "text": "readframe(io, idx...)\n\nOut-of-place read of a single frame from a JavaSeis dataset.  For non full frame, the resulting traces and headers are left justified.  Examples:\n\n3D:\n\nfrm_idx = 1\ntrcs, hdrs = readframe(jsopen(\"data_3D.js\"), frm_idx)\n\n4D:\n\nfrm_idx, vol_idx = 1, 1\ntrcs, hdrs = readframe(jsopen(\"data_4D.js\"), frm_idx, vol_idx)\n\n5D:\n\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\ntrcs, hdrs = readframe(jsopen(\"data_5D.js\"), frm_idx, vol_idx, hyp_idx)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readframe!",
    "page": "Docstrings",
    "title": "TeaSeis.readframe!",
    "category": "function",
    "text": "readframe!(io, trcs, hdrs, idx...)\n\nIn-place read of a single frame from a JavaSeis dataset.  For non full frame, the resulting traces and headers are left justified.  Examples:\n\n3D:\n\nio = jsopen(\"data_3D.js\")\ntrcs, hdrs = allocframe(io)\nfrm_idx = 1\nreadframe!(io, trcs, hdrs, frm_idx)\n\n4D:\n\nio = jsopen(\"data_4D.js\")\ntrcs, hdrs = allocframe(io)\nfrm_idx, vol_idx = 1, 1\nreadframe!(io, trcs, hdrs, frm_idx, vol_idx)\n\n5D:\n\nio = jsopen(\"data_5D.js\")\ntrcs, hdrs = allocframe(io)\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nreadframe!(io, trcs, hdrs, frm_idx, vol_idx, hyp_idx)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readframehdrs",
    "page": "Docstrings",
    "title": "TeaSeis.readframehdrs",
    "category": "function",
    "text": "readframehdrs(io, idx...)\n\nOut-of-place read of a single frame (headers only) from a JavaSeis dataset.  For non full frame, the resulting headers are left justified.  Examples:\n\n3D:\n\nfrm_idx = 1\nhdrs = readframehdrs(jsopen(\"data_3D.js\"), frm_idx)\n\n4D:\n\nfrm_idx, vol_idx = 1, 1\nhdrs = readframehdrs(jsopen(\"data_4D.js\"), frm_idx, vol_idx)\n\n5D:\n\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nhdrs = readframehdrs(jsopen(\"data_5D.js\"), frm_idx, vol_idx, hyp_idx)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readframehdrs!",
    "page": "Docstrings",
    "title": "TeaSeis.readframehdrs!",
    "category": "function",
    "text": "readframehdrs!(io, hdrs, idx...)\n\nIn-place read of a single frame from a JavaSeis dataset (headers only).  For non full frame, the resulting headers are left justified.  Examples:\n\n3D:\n\nio = jsopen(\"data_3D.js\")\nhdrs = allocframehdrs(io)\nfrm_idx = 1\nreadframehdrs!(io, hdrs, frm_idx)\n\n4D:\n\nio = jsopen(\"data_4D.js\")\nhdrs = allocframehdrs(io)\nfrm_idx, vol_idx = 1, 1\nreadframehdrs!(io, hdrs, frm_idx, vol_idx)\n\n5D:\n\nio = jsopen(\"data_5D.js\")\nhdrs = allocframehdrs(io)\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nreadframehdrs!(io, hdrs, frm_idx, vol_idx, hyp_idx)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readframetrcs",
    "page": "Docstrings",
    "title": "TeaSeis.readframetrcs",
    "category": "function",
    "text": "readframetrcs(io, idx...)\n\nOut-of-place read of a single frame (traces only) from a JavaSeis dataset.  For non full frame, the resulting traces are left justified.  Examples:\n\n3D:\n\nfrm_idx = 1\ntrcs = readframetrcs(jsopen(\"data_3D.js\"), frm_idx)\n\n4D:\n\nfrm_idx, vol_idx = 1, 1\ntrcs = readframetrcs(jsopen(\"data_4D.js\"), frm_idx, vol_idx)\n\n5D:\n\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\ntrcs = readframetrcs(jsopen(\"data_5D.js\"), frm_idx, vol_idx, hyp_idx)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readframetrcs!",
    "page": "Docstrings",
    "title": "TeaSeis.readframetrcs!",
    "category": "function",
    "text": "readframetrcs!(io, trcs, hdrs, idx...)\n\nIn-place read of a single frame from a JavaSeis dataset (traces only).  For non full frame, the resulting traces are left justified.  Examples:\n\n3D:\n\nio = jsopen(\"data_3D.js\")\ntrcs = allocframetrcs(io)\nfrm_idx = 1\nreadframetrcs!(io, trcs, frm_idx)\n\n4D:\n\nio = jsopen(\"data_4D.js\")\ntrcs = allocframetrcs(io)\nfrm_idx, vol_idx = 1, 1\nreadframetrcs!(io, trcs, frm_idx, vol_idx)\n\n5D:\n\nio = jsopen(\"data_5D.js\")\ntrcs = allocframetrcs(io)\nfrm_idx, vol_idx, hyp_idx = 1, 1, 1\nreadframetrcs!(io, trcs, frm_idx, vol_idx, hyp_idx)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readhdrs",
    "page": "Docstrings",
    "title": "TeaSeis.readhdrs",
    "category": "function",
    "text": "readhdrs(io, trace_range, range...)\n\nOut-of-place read of a subset of data (headers only) from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using readframetrcs instead.  Examples:\n\n3D:\n\nhdrs = readhdrs(jsopen(\"data_3D.js\"), :, :, :)\nhdrs = readhdrs(jsopen(\"data_3D.js\"), :, 1:2:end, 1:5)\n\n4D:\n\nhdrs = readhdrs(jsopen(\"data_4D.js\"), :, :, :, :)\nhdrs = readhdrs(jsopen(\"data_4D.js\"), :, :, 2, 2:2:10)\n\n5D:\n\nhdrs = readhdrs(jsopen(\"data_5D.js\"), :, :, :, :, :)\nhdrs = readhdrs(jsopen(\"data_5D.js\"), :, :, 2, 2:2:10, 1:10)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readhdrs!",
    "page": "Docstrings",
    "title": "TeaSeis.readhdrs!",
    "category": "function",
    "text": "readhdrs!(io, hdrs, smp_range, trace_range, range...)\n\nIn-place read of a subset of data (headers only) from a JavaSeis file. If performance is important, then consider using readframehdrs! instead.  Examples:\n\n3D:\n\nreadhdrs!(jsopen(\"data_3D.js\"), hdrs, :, :, :)\nreadhdrs!(jsopen(\"data_3D.js\"), hdrs, :, 1:2:end, 1:5)\n\n4D:\n\nreadhdrs!(jsopen(\"data_4D.js\"), hdrs, :, :, :, :)\nreadhdrs!(jsopen(\"data_4D.js\"), hdrs, :, :, 2, 2:2:10)\n\n5D:\n\nreadhdrs!(jsopen(\"data_5D.js\"), hdrs, :, :, :, :, :)\nreadhdrs!(jsopen(\"data_5D.js\"), hdrs, :, :, 2, 2:2:10, 1:10)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readtrcs",
    "page": "Docstrings",
    "title": "TeaSeis.readtrcs",
    "category": "function",
    "text": "readtrcs(io, sample_range, trace_range, range...)\n\nOut-of-place read of a subset of data (traces only) from a JavaSeis file. Returns an array of trace data. If performance is important, then consider using readframetrcs instead.  Examples:\n\n3D:\n\ntrcs = readtrcs(jsopen(\"data_3D.js\"), :, :, :)\ntrcs = readtrcs(jsopen(\"data_3D.js\"), :, 1:2:end, 1:5)\n\n4D:\n\ntrcs = readtrcs(jsopen(\"data_4D.js\"), :, :, :, :)\ntrcs = readtrcs(jsopen(\"data_4D.js\"), :, :, 2, 2:2:10)\n\n5D:\n\ntrcs = readtrcs(jsopen(\"data_5D.js\"), :, :, :, :, :)\ntrcs = readtrcs(jsopen(\"data_5D.js\"), :, :, 2, 2:2:10, 1:10)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.readtrcs!",
    "page": "Docstrings",
    "title": "TeaSeis.readtrcs!",
    "category": "function",
    "text": "readtrcs!(io, trcs, sample_range, trace_range, range...)\n\nIn-place read of a subset of data (traces only) from a JavaSeis file. If performance is important, then consider using readframetrcs! instead.  Examples:\n\n3D:\n\nreadtrcs!(jsopen(\"data_3D.js\"), trcs, :, :, :)\nreadtrcs!(jsopen(\"data_3D.js\"), trcs, :, 1:2:end, 1:5)\n\n4D:\n\nreadtrcs!(jsopen(\"data_4D.js\"), trcs, :, :, :, :)\nreadtrcs!(jsopen(\"data_4D.js\"), trcs, :, :, 2, 2:2:10)\n\n5D:\n\nreadtrcs!(jsopen(\"data_5D.js\"), trcs, :, :, :, :, :)\nreadtrcs!(jsopen(\"data_5D.js\"), trcs, :, :, 2, 2:2:10, 1:10)\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.regularize!",
    "page": "Docstrings",
    "title": "TeaSeis.regularize!",
    "category": "function",
    "text": "regularize!(io, trcs, hdrs)\n\nRegularize the traces in a frame, moving them from their left-justified state, to one that reflects their trace location within a frame according to their trace framework definition.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.set!",
    "page": "Docstrings",
    "title": "TeaSeis.set!",
    "category": "function",
    "text": "set!(prop, hdrs, i, value)\n\nSet the value of the trace property prop::TraceProperty stored in the header of the ith column of hdrs::Array{UInt8,2} to value::T.  For example, io=jsopen(\"test.js\"); hdrs=readframehdrs(io,1); set!(prop(io,\"REC_X\"), 1, 10.0).\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.units",
    "page": "Docstrings",
    "title": "TeaSeis.units",
    "category": "function",
    "text": "units(io)\n\nReturns the unit of measure of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\nunits(io, i)\n\nReturns the unit of measure of the ith dimension of the framework axes of the JavaSeis dataset corresponding to io::JSeis.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#TeaSeis.writeframe",
    "page": "Docstrings",
    "title": "TeaSeis.writeframe",
    "category": "function",
    "text": "writeframe(io, trcs, hdrs)\n\nWrite a frame of data to the JavaSeis dataset corresponding to io::JSeis.  trcs and hdrs are 2-dimensional arrays. The location of the dataset written to is determined by the values of the framework headers stored in hdrs.\n\n\n\n\n\nwriteframe(io, trcs, idx...)\n\nWrite a frame of data to the JavaSeis dataset corresponding to io::JSeis.  trcs is a 2-dimensional array.  The location of the datset written to is determined by idx....  For example:\n\n3D:\n\nwriteframe(jsopen(\"data_3D.js\"), trcs, 1) # write to frame 1\n\n4D:\n\nwriteframe(jsopen(\"data_4D.js\"), trcs, 1, 2) # write to frame 1, volume 2\n\n5D:\n\nwriteframe(jsopen(\"data_5D.js\"), trcs, 1, 2, 3) # write to frame 1, volume 2, hypercube 3\n\n\n\n\n\n"
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "TeaSeis.DataPropertyTeaSeis.ExtentTeaSeis.GeometryTeaSeis.JSeisTeaSeis.TeaSeisTeaSeis.TraceCompressorTeaSeis.TracePropertyTeaSeis.TracePropertyDefTeaSeis.allocframeTeaSeis.allocframebufTeaSeis.allocframehdrsTeaSeis.allocframetrcsTeaSeis.asciidataformatTeaSeis.create_mapTeaSeis.datapropertyTeaSeis.datestampTeaSeis.delete_first_lineTeaSeis.descriptionTeaSeis.dictJStoPMTeaSeis.dictPMtoJSTeaSeis.domainsTeaSeis.elementcountTeaSeis.emptysecondaries!TeaSeis.evalTeaSeis.extentdirTeaSeis.extentindexTeaSeis.foldTeaSeis.fold!TeaSeis.fold_implTeaSeis.formatTeaSeis.formataxesTeaSeis.geometryTeaSeis.get_axis_domainsTeaSeis.get_axis_lengthsTeaSeis.get_axis_lincsTeaSeis.get_axis_lstartsTeaSeis.get_axis_pincsTeaSeis.get_axis_propdefTeaSeis.get_axis_propdefsTeaSeis.get_axis_pstartsTeaSeis.get_axis_unitsTeaSeis.get_dataformatTeaSeis.get_dataorderTeaSeis.get_datapropertiesTeaSeis.get_datatypeTeaSeis.get_descriptionTeaSeis.get_extent_manager_elementTeaSeis.get_extentmaxposTeaSeis.get_extentnameTeaSeis.get_extentsTeaSeis.get_extentsizeTeaSeis.get_file_property_elementTeaSeis.get_geomTeaSeis.get_mappedTeaSeis.get_nextentsTeaSeis.get_nsecondariesTeaSeis.get_secondariesTeaSeis.get_secondaryTeaSeis.get_statusTeaSeis.get_trace_propertiesTeaSeis.hasdatapropertyTeaSeis.headerlengthTeaSeis.includeTeaSeis.ind2subTeaSeis.indexTeaSeis.jscreateTeaSeis.jsopenTeaSeis.jsopen_writeTeaSeis.labelTeaSeis.labelsTeaSeis.leftjustify!TeaSeis.lincsTeaSeis.lrangeTeaSeis.lstartsTeaSeis.make_extentdirsTeaSeis.make_extentsTeaSeis.make_primarydirTeaSeis.mappositionTeaSeis.missingTeaSeis.nextents_heuristicTeaSeis.packframe!TeaSeis.packtrace!TeaSeis.parseindexTeaSeis.parserngTeaSeis.parserngsTeaSeis.pincsTeaSeis.propTeaSeis.propdefTeaSeis.propdefsTeaSeis.propertyformatstringTeaSeis.proplabelTeaSeis.propsTeaSeis.pstartsTeaSeis.read_impl!TeaSeis.readframeTeaSeis.readframe!TeaSeis.readframe_implTeaSeis.readframe_impl!TeaSeis.readframehdrsTeaSeis.readframehdrs!TeaSeis.readframehdrs_implTeaSeis.readframehdrs_impl!TeaSeis.readframetrcsTeaSeis.readframetrcs!TeaSeis.readframetrcs_implTeaSeis.readframetrcs_impl!TeaSeis.readhdrsTeaSeis.readhdrs!TeaSeis.readhdrs_impl!TeaSeis.readmapTeaSeis.readtrcsTeaSeis.readtrcs!TeaSeis.readtrcs_impl!TeaSeis.regularize!TeaSeis.rmsecondariesTeaSeis.set!TeaSeis.sspropset!TeaSeis.stockdatatypeTeaSeis.stockdomainTeaSeis.stockpropTeaSeis.stockunitTeaSeis.stringtype2typeTeaSeis.sub2indTeaSeis.teaseis_robust_rmTeaSeis.tracelengthTeaSeis.tracetypeTeaSeis.unitsTeaSeis.unpackframe!TeaSeis.unpacktrace!TeaSeis.volumeindexTeaSeis.write_extentmanagerTeaSeis.write_filepropertiesTeaSeis.write_helperTeaSeis.write_namepropertiesTeaSeis.write_parpropertyTeaSeis.write_statuspropertiesTeaSeis.write_tracepropertyTeaSeis.write_trcshdrs_helperTeaSeis.write_virtualfoldersTeaSeis.writeframeTeaSeis.writeframe_impl"
},

]}
